<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PhraseApp
 *
 * PhraseApp API for the interaction with the PhraseApp localization platform
 *
 * OpenAPI spec version: 2.0
 * Contact: support@phraseapp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation accountsAccountIdGlossariesGet
     *
     * @param string $account_id AccountId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Glossary[]
     */
    public function accountsAccountIdGlossariesGet($account_id, $per_page = '25', $page = '1')
    {
        list($response) = $this->accountsAccountIdGlossariesGetWithHttpInfo($account_id, $per_page, $page);
        return $response;
    }

    /**
     * Operation accountsAccountIdGlossariesGetWithHttpInfo
     *
     * @param string $account_id AccountId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Glossary[], HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdGlossariesGetWithHttpInfo($account_id, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Glossary[]';
        $request = $this->accountsAccountIdGlossariesGetRequest($account_id, $per_page, $page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Glossary[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdGlossariesGetAsync
     *
     * 
     *
     * @param string $account_id AccountId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdGlossariesGetAsync($account_id, $per_page = '25', $page = '1')
    {
        return $this->accountsAccountIdGlossariesGetAsyncWithHttpInfo($account_id, $per_page, $page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountsAccountIdGlossariesGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $account_id AccountId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdGlossariesGetAsyncWithHttpInfo($account_id, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Glossary[]';
        $request = $this->accountsAccountIdGlossariesGetRequest($account_id, $per_page, $page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountsAccountIdGlossariesGet'
     *
     * @param string $account_id AccountId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdGlossariesGetRequest($account_id, $per_page = '25', $page = '1')
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling accountsAccountIdGlossariesGet');
        }

        $resourcePath = '/accounts/{AccountId}/glossaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace('{' . 'AccountId' . '}', ObjectSerializer::toPathValue($account_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsGet
     *
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GlossaryTerm[]
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsGet($account_id, $glossary_id, $per_page = '25', $page = '1')
    {
        list($response) = $this->accountsAccountIdGlossariesGlossaryIdTermsGetWithHttpInfo($account_id, $glossary_id, $per_page, $page);
        return $response;
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsGetWithHttpInfo
     *
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GlossaryTerm[], HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsGetWithHttpInfo($account_id, $glossary_id, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\GlossaryTerm[]';
        $request = $this->accountsAccountIdGlossariesGlossaryIdTermsGetRequest($account_id, $glossary_id, $per_page, $page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\GlossaryTerm[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsGetAsync
     *
     * 
     *
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsGetAsync($account_id, $glossary_id, $per_page = '25', $page = '1')
    {
        return $this->accountsAccountIdGlossariesGlossaryIdTermsGetAsyncWithHttpInfo($account_id, $glossary_id, $per_page, $page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsGetAsyncWithHttpInfo($account_id, $glossary_id, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\GlossaryTerm[]';
        $request = $this->accountsAccountIdGlossariesGlossaryIdTermsGetRequest($account_id, $glossary_id, $per_page, $page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountsAccountIdGlossariesGlossaryIdTermsGet'
     *
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdGlossariesGlossaryIdTermsGetRequest($account_id, $glossary_id, $per_page = '25', $page = '1')
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling accountsAccountIdGlossariesGlossaryIdTermsGet');
        }
        // verify the required parameter 'glossary_id' is set
        if ($glossary_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $glossary_id when calling accountsAccountIdGlossariesGlossaryIdTermsGet');
        }

        $resourcePath = '/accounts/{AccountId}/glossaries/{GlossaryId}/terms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace('{' . 'AccountId' . '}', ObjectSerializer::toPathValue($account_id), $resourcePath);
        }
        // path params
        if ($glossary_id !== null) {
            $resourcePath = str_replace('{' . 'GlossaryId' . '}', ObjectSerializer::toPathValue($glossary_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsIdDelete
     *
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsIdDelete($account_id, $glossary_id, $id)
    {
        $this->accountsAccountIdGlossariesGlossaryIdTermsIdDeleteWithHttpInfo($account_id, $glossary_id, $id);
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsIdDeleteWithHttpInfo
     *
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsIdDeleteWithHttpInfo($account_id, $glossary_id, $id)
    {
        $returnType = '';
        $request = $this->accountsAccountIdGlossariesGlossaryIdTermsIdDeleteRequest($account_id, $glossary_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsIdDeleteAsync
     *
     * 
     *
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsIdDeleteAsync($account_id, $glossary_id, $id)
    {
        return $this->accountsAccountIdGlossariesGlossaryIdTermsIdDeleteAsyncWithHttpInfo($account_id, $glossary_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsIdDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsIdDeleteAsyncWithHttpInfo($account_id, $glossary_id, $id)
    {
        $returnType = '';
        $request = $this->accountsAccountIdGlossariesGlossaryIdTermsIdDeleteRequest($account_id, $glossary_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountsAccountIdGlossariesGlossaryIdTermsIdDelete'
     *
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdGlossariesGlossaryIdTermsIdDeleteRequest($account_id, $glossary_id, $id)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling accountsAccountIdGlossariesGlossaryIdTermsIdDelete');
        }
        // verify the required parameter 'glossary_id' is set
        if ($glossary_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $glossary_id when calling accountsAccountIdGlossariesGlossaryIdTermsIdDelete');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling accountsAccountIdGlossariesGlossaryIdTermsIdDelete');
        }

        $resourcePath = '/accounts/{AccountId}/glossaries/{GlossaryId}/terms/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace('{' . 'AccountId' . '}', ObjectSerializer::toPathValue($account_id), $resourcePath);
        }
        // path params
        if ($glossary_id !== null) {
            $resourcePath = str_replace('{' . 'GlossaryId' . '}', ObjectSerializer::toPathValue($glossary_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsIdGet
     *
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GlossaryTerm
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsIdGet($account_id, $glossary_id, $id)
    {
        list($response) = $this->accountsAccountIdGlossariesGlossaryIdTermsIdGetWithHttpInfo($account_id, $glossary_id, $id);
        return $response;
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsIdGetWithHttpInfo
     *
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GlossaryTerm, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsIdGetWithHttpInfo($account_id, $glossary_id, $id)
    {
        $returnType = '\Swagger\Client\Model\GlossaryTerm';
        $request = $this->accountsAccountIdGlossariesGlossaryIdTermsIdGetRequest($account_id, $glossary_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\GlossaryTerm', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsIdGetAsync
     *
     * 
     *
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsIdGetAsync($account_id, $glossary_id, $id)
    {
        return $this->accountsAccountIdGlossariesGlossaryIdTermsIdGetAsyncWithHttpInfo($account_id, $glossary_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsIdGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsIdGetAsyncWithHttpInfo($account_id, $glossary_id, $id)
    {
        $returnType = '\Swagger\Client\Model\GlossaryTerm';
        $request = $this->accountsAccountIdGlossariesGlossaryIdTermsIdGetRequest($account_id, $glossary_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountsAccountIdGlossariesGlossaryIdTermsIdGet'
     *
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdGlossariesGlossaryIdTermsIdGetRequest($account_id, $glossary_id, $id)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling accountsAccountIdGlossariesGlossaryIdTermsIdGet');
        }
        // verify the required parameter 'glossary_id' is set
        if ($glossary_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $glossary_id when calling accountsAccountIdGlossariesGlossaryIdTermsIdGet');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling accountsAccountIdGlossariesGlossaryIdTermsIdGet');
        }

        $resourcePath = '/accounts/{AccountId}/glossaries/{GlossaryId}/terms/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace('{' . 'AccountId' . '}', ObjectSerializer::toPathValue($account_id), $resourcePath);
        }
        // path params
        if ($glossary_id !== null) {
            $resourcePath = str_replace('{' . 'GlossaryId' . '}', ObjectSerializer::toPathValue($glossary_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsIdPatch
     *
     * @param string $term  (required)
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $id Id (required)
     * @param string $description  (optional)
     * @param bool $translatable  (optional)
     * @param bool $case_sensitive  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GlossaryTerm
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsIdPatch($term, $account_id, $glossary_id, $id, $description = null, $translatable = null, $case_sensitive = null)
    {
        list($response) = $this->accountsAccountIdGlossariesGlossaryIdTermsIdPatchWithHttpInfo($term, $account_id, $glossary_id, $id, $description, $translatable, $case_sensitive);
        return $response;
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsIdPatchWithHttpInfo
     *
     * @param string $term  (required)
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $id Id (required)
     * @param string $description  (optional)
     * @param bool $translatable  (optional)
     * @param bool $case_sensitive  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GlossaryTerm, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsIdPatchWithHttpInfo($term, $account_id, $glossary_id, $id, $description = null, $translatable = null, $case_sensitive = null)
    {
        $returnType = '\Swagger\Client\Model\GlossaryTerm';
        $request = $this->accountsAccountIdGlossariesGlossaryIdTermsIdPatchRequest($term, $account_id, $glossary_id, $id, $description, $translatable, $case_sensitive);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\GlossaryTerm', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsIdPatchAsync
     *
     * 
     *
     * @param string $term  (required)
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $id Id (required)
     * @param string $description  (optional)
     * @param bool $translatable  (optional)
     * @param bool $case_sensitive  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsIdPatchAsync($term, $account_id, $glossary_id, $id, $description = null, $translatable = null, $case_sensitive = null)
    {
        return $this->accountsAccountIdGlossariesGlossaryIdTermsIdPatchAsyncWithHttpInfo($term, $account_id, $glossary_id, $id, $description, $translatable, $case_sensitive)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsIdPatchAsyncWithHttpInfo
     *
     * 
     *
     * @param string $term  (required)
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $id Id (required)
     * @param string $description  (optional)
     * @param bool $translatable  (optional)
     * @param bool $case_sensitive  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsIdPatchAsyncWithHttpInfo($term, $account_id, $glossary_id, $id, $description = null, $translatable = null, $case_sensitive = null)
    {
        $returnType = '\Swagger\Client\Model\GlossaryTerm';
        $request = $this->accountsAccountIdGlossariesGlossaryIdTermsIdPatchRequest($term, $account_id, $glossary_id, $id, $description, $translatable, $case_sensitive);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountsAccountIdGlossariesGlossaryIdTermsIdPatch'
     *
     * @param string $term  (required)
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $id Id (required)
     * @param string $description  (optional)
     * @param bool $translatable  (optional)
     * @param bool $case_sensitive  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdGlossariesGlossaryIdTermsIdPatchRequest($term, $account_id, $glossary_id, $id, $description = null, $translatable = null, $case_sensitive = null)
    {
        // verify the required parameter 'term' is set
        if ($term === null) {
            throw new \InvalidArgumentException('Missing the required parameter $term when calling accountsAccountIdGlossariesGlossaryIdTermsIdPatch');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling accountsAccountIdGlossariesGlossaryIdTermsIdPatch');
        }
        // verify the required parameter 'glossary_id' is set
        if ($glossary_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $glossary_id when calling accountsAccountIdGlossariesGlossaryIdTermsIdPatch');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling accountsAccountIdGlossariesGlossaryIdTermsIdPatch');
        }

        $resourcePath = '/accounts/{AccountId}/glossaries/{GlossaryId}/terms/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($term !== null) {
            $queryParams['term'] = ObjectSerializer::toQueryValue($term);
        }
        // query params
        if ($description !== null) {
            $queryParams['description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($translatable !== null) {
            $queryParams['translatable'] = ObjectSerializer::toQueryValue($translatable);
        }
        // query params
        if ($case_sensitive !== null) {
            $queryParams['case_sensitive'] = ObjectSerializer::toQueryValue($case_sensitive);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace('{' . 'AccountId' . '}', ObjectSerializer::toPathValue($account_id), $resourcePath);
        }
        // path params
        if ($glossary_id !== null) {
            $resourcePath = str_replace('{' . 'GlossaryId' . '}', ObjectSerializer::toPathValue($glossary_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsPost
     *
     * @param string $term  (required)
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $description  (optional)
     * @param bool $translatable  (optional)
     * @param bool $case_sensitive  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GlossaryTerm
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsPost($term, $account_id, $glossary_id, $description = null, $translatable = null, $case_sensitive = null)
    {
        list($response) = $this->accountsAccountIdGlossariesGlossaryIdTermsPostWithHttpInfo($term, $account_id, $glossary_id, $description, $translatable, $case_sensitive);
        return $response;
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsPostWithHttpInfo
     *
     * @param string $term  (required)
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $description  (optional)
     * @param bool $translatable  (optional)
     * @param bool $case_sensitive  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GlossaryTerm, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsPostWithHttpInfo($term, $account_id, $glossary_id, $description = null, $translatable = null, $case_sensitive = null)
    {
        $returnType = '\Swagger\Client\Model\GlossaryTerm';
        $request = $this->accountsAccountIdGlossariesGlossaryIdTermsPostRequest($term, $account_id, $glossary_id, $description, $translatable, $case_sensitive);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\GlossaryTerm', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsPostAsync
     *
     * 
     *
     * @param string $term  (required)
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $description  (optional)
     * @param bool $translatable  (optional)
     * @param bool $case_sensitive  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsPostAsync($term, $account_id, $glossary_id, $description = null, $translatable = null, $case_sensitive = null)
    {
        return $this->accountsAccountIdGlossariesGlossaryIdTermsPostAsyncWithHttpInfo($term, $account_id, $glossary_id, $description, $translatable, $case_sensitive)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsPostAsyncWithHttpInfo
     *
     * 
     *
     * @param string $term  (required)
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $description  (optional)
     * @param bool $translatable  (optional)
     * @param bool $case_sensitive  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsPostAsyncWithHttpInfo($term, $account_id, $glossary_id, $description = null, $translatable = null, $case_sensitive = null)
    {
        $returnType = '\Swagger\Client\Model\GlossaryTerm';
        $request = $this->accountsAccountIdGlossariesGlossaryIdTermsPostRequest($term, $account_id, $glossary_id, $description, $translatable, $case_sensitive);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountsAccountIdGlossariesGlossaryIdTermsPost'
     *
     * @param string $term  (required)
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $description  (optional)
     * @param bool $translatable  (optional)
     * @param bool $case_sensitive  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdGlossariesGlossaryIdTermsPostRequest($term, $account_id, $glossary_id, $description = null, $translatable = null, $case_sensitive = null)
    {
        // verify the required parameter 'term' is set
        if ($term === null) {
            throw new \InvalidArgumentException('Missing the required parameter $term when calling accountsAccountIdGlossariesGlossaryIdTermsPost');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling accountsAccountIdGlossariesGlossaryIdTermsPost');
        }
        // verify the required parameter 'glossary_id' is set
        if ($glossary_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $glossary_id when calling accountsAccountIdGlossariesGlossaryIdTermsPost');
        }

        $resourcePath = '/accounts/{AccountId}/glossaries/{GlossaryId}/terms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($term !== null) {
            $queryParams['term'] = ObjectSerializer::toQueryValue($term);
        }
        // query params
        if ($description !== null) {
            $queryParams['description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($translatable !== null) {
            $queryParams['translatable'] = ObjectSerializer::toQueryValue($translatable);
        }
        // query params
        if ($case_sensitive !== null) {
            $queryParams['case_sensitive'] = ObjectSerializer::toQueryValue($case_sensitive);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace('{' . 'AccountId' . '}', ObjectSerializer::toPathValue($account_id), $resourcePath);
        }
        // path params
        if ($glossary_id !== null) {
            $resourcePath = str_replace('{' . 'GlossaryId' . '}', ObjectSerializer::toPathValue($glossary_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdDelete
     *
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $term_id TermId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdDelete($account_id, $glossary_id, $term_id, $id)
    {
        $this->accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdDeleteWithHttpInfo($account_id, $glossary_id, $term_id, $id);
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdDeleteWithHttpInfo
     *
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $term_id TermId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdDeleteWithHttpInfo($account_id, $glossary_id, $term_id, $id)
    {
        $returnType = '';
        $request = $this->accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdDeleteRequest($account_id, $glossary_id, $term_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdDeleteAsync
     *
     * 
     *
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $term_id TermId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdDeleteAsync($account_id, $glossary_id, $term_id, $id)
    {
        return $this->accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdDeleteAsyncWithHttpInfo($account_id, $glossary_id, $term_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $term_id TermId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdDeleteAsyncWithHttpInfo($account_id, $glossary_id, $term_id, $id)
    {
        $returnType = '';
        $request = $this->accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdDeleteRequest($account_id, $glossary_id, $term_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdDelete'
     *
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $term_id TermId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdDeleteRequest($account_id, $glossary_id, $term_id, $id)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdDelete');
        }
        // verify the required parameter 'glossary_id' is set
        if ($glossary_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $glossary_id when calling accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdDelete');
        }
        // verify the required parameter 'term_id' is set
        if ($term_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $term_id when calling accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdDelete');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdDelete');
        }

        $resourcePath = '/accounts/{AccountId}/glossaries/{GlossaryId}/terms/{TermId}/translations/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace('{' . 'AccountId' . '}', ObjectSerializer::toPathValue($account_id), $resourcePath);
        }
        // path params
        if ($glossary_id !== null) {
            $resourcePath = str_replace('{' . 'GlossaryId' . '}', ObjectSerializer::toPathValue($glossary_id), $resourcePath);
        }
        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace('{' . 'TermId' . '}', ObjectSerializer::toPathValue($term_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdPatch
     *
     * @param string $locale_code  (required)
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $term_id TermId (required)
     * @param string $id Id (required)
     * @param string $content  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GlossaryTermTranslation
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdPatch($locale_code, $account_id, $glossary_id, $term_id, $id, $content = null)
    {
        list($response) = $this->accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdPatchWithHttpInfo($locale_code, $account_id, $glossary_id, $term_id, $id, $content);
        return $response;
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdPatchWithHttpInfo
     *
     * @param string $locale_code  (required)
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $term_id TermId (required)
     * @param string $id Id (required)
     * @param string $content  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GlossaryTermTranslation, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdPatchWithHttpInfo($locale_code, $account_id, $glossary_id, $term_id, $id, $content = null)
    {
        $returnType = '\Swagger\Client\Model\GlossaryTermTranslation';
        $request = $this->accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdPatchRequest($locale_code, $account_id, $glossary_id, $term_id, $id, $content);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\GlossaryTermTranslation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdPatchAsync
     *
     * 
     *
     * @param string $locale_code  (required)
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $term_id TermId (required)
     * @param string $id Id (required)
     * @param string $content  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdPatchAsync($locale_code, $account_id, $glossary_id, $term_id, $id, $content = null)
    {
        return $this->accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdPatchAsyncWithHttpInfo($locale_code, $account_id, $glossary_id, $term_id, $id, $content)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdPatchAsyncWithHttpInfo
     *
     * 
     *
     * @param string $locale_code  (required)
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $term_id TermId (required)
     * @param string $id Id (required)
     * @param string $content  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdPatchAsyncWithHttpInfo($locale_code, $account_id, $glossary_id, $term_id, $id, $content = null)
    {
        $returnType = '\Swagger\Client\Model\GlossaryTermTranslation';
        $request = $this->accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdPatchRequest($locale_code, $account_id, $glossary_id, $term_id, $id, $content);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdPatch'
     *
     * @param string $locale_code  (required)
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $term_id TermId (required)
     * @param string $id Id (required)
     * @param string $content  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdPatchRequest($locale_code, $account_id, $glossary_id, $term_id, $id, $content = null)
    {
        // verify the required parameter 'locale_code' is set
        if ($locale_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $locale_code when calling accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdPatch');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdPatch');
        }
        // verify the required parameter 'glossary_id' is set
        if ($glossary_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $glossary_id when calling accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdPatch');
        }
        // verify the required parameter 'term_id' is set
        if ($term_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $term_id when calling accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdPatch');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsIdPatch');
        }

        $resourcePath = '/accounts/{AccountId}/glossaries/{GlossaryId}/terms/{TermId}/translations/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locale_code !== null) {
            $queryParams['locale_code'] = ObjectSerializer::toQueryValue($locale_code);
        }
        // query params
        if ($content !== null) {
            $queryParams['content'] = ObjectSerializer::toQueryValue($content);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace('{' . 'AccountId' . '}', ObjectSerializer::toPathValue($account_id), $resourcePath);
        }
        // path params
        if ($glossary_id !== null) {
            $resourcePath = str_replace('{' . 'GlossaryId' . '}', ObjectSerializer::toPathValue($glossary_id), $resourcePath);
        }
        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace('{' . 'TermId' . '}', ObjectSerializer::toPathValue($term_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsPost
     *
     * @param string $locale_code  (required)
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $term_id TermId (required)
     * @param string $content  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GlossaryTermTranslation
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsPost($locale_code, $account_id, $glossary_id, $term_id, $content = null)
    {
        list($response) = $this->accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsPostWithHttpInfo($locale_code, $account_id, $glossary_id, $term_id, $content);
        return $response;
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsPostWithHttpInfo
     *
     * @param string $locale_code  (required)
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $term_id TermId (required)
     * @param string $content  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GlossaryTermTranslation, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsPostWithHttpInfo($locale_code, $account_id, $glossary_id, $term_id, $content = null)
    {
        $returnType = '\Swagger\Client\Model\GlossaryTermTranslation';
        $request = $this->accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsPostRequest($locale_code, $account_id, $glossary_id, $term_id, $content);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\GlossaryTermTranslation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsPostAsync
     *
     * 
     *
     * @param string $locale_code  (required)
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $term_id TermId (required)
     * @param string $content  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsPostAsync($locale_code, $account_id, $glossary_id, $term_id, $content = null)
    {
        return $this->accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsPostAsyncWithHttpInfo($locale_code, $account_id, $glossary_id, $term_id, $content)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsPostAsyncWithHttpInfo
     *
     * 
     *
     * @param string $locale_code  (required)
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $term_id TermId (required)
     * @param string $content  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsPostAsyncWithHttpInfo($locale_code, $account_id, $glossary_id, $term_id, $content = null)
    {
        $returnType = '\Swagger\Client\Model\GlossaryTermTranslation';
        $request = $this->accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsPostRequest($locale_code, $account_id, $glossary_id, $term_id, $content);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsPost'
     *
     * @param string $locale_code  (required)
     * @param string $account_id AccountId (required)
     * @param string $glossary_id GlossaryId (required)
     * @param string $term_id TermId (required)
     * @param string $content  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsPostRequest($locale_code, $account_id, $glossary_id, $term_id, $content = null)
    {
        // verify the required parameter 'locale_code' is set
        if ($locale_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $locale_code when calling accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsPost');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsPost');
        }
        // verify the required parameter 'glossary_id' is set
        if ($glossary_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $glossary_id when calling accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsPost');
        }
        // verify the required parameter 'term_id' is set
        if ($term_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $term_id when calling accountsAccountIdGlossariesGlossaryIdTermsTermIdTranslationsPost');
        }

        $resourcePath = '/accounts/{AccountId}/glossaries/{GlossaryId}/terms/{TermId}/translations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locale_code !== null) {
            $queryParams['locale_code'] = ObjectSerializer::toQueryValue($locale_code);
        }
        // query params
        if ($content !== null) {
            $queryParams['content'] = ObjectSerializer::toQueryValue($content);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace('{' . 'AccountId' . '}', ObjectSerializer::toPathValue($account_id), $resourcePath);
        }
        // path params
        if ($glossary_id !== null) {
            $resourcePath = str_replace('{' . 'GlossaryId' . '}', ObjectSerializer::toPathValue($glossary_id), $resourcePath);
        }
        // path params
        if ($term_id !== null) {
            $resourcePath = str_replace('{' . 'TermId' . '}', ObjectSerializer::toPathValue($term_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdGlossariesIdDelete
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountsAccountIdGlossariesIdDelete($account_id, $id)
    {
        $this->accountsAccountIdGlossariesIdDeleteWithHttpInfo($account_id, $id);
    }

    /**
     * Operation accountsAccountIdGlossariesIdDeleteWithHttpInfo
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdGlossariesIdDeleteWithHttpInfo($account_id, $id)
    {
        $returnType = '';
        $request = $this->accountsAccountIdGlossariesIdDeleteRequest($account_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdGlossariesIdDeleteAsync
     *
     * 
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdGlossariesIdDeleteAsync($account_id, $id)
    {
        return $this->accountsAccountIdGlossariesIdDeleteAsyncWithHttpInfo($account_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountsAccountIdGlossariesIdDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdGlossariesIdDeleteAsyncWithHttpInfo($account_id, $id)
    {
        $returnType = '';
        $request = $this->accountsAccountIdGlossariesIdDeleteRequest($account_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountsAccountIdGlossariesIdDelete'
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdGlossariesIdDeleteRequest($account_id, $id)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling accountsAccountIdGlossariesIdDelete');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling accountsAccountIdGlossariesIdDelete');
        }

        $resourcePath = '/accounts/{AccountId}/glossaries/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace('{' . 'AccountId' . '}', ObjectSerializer::toPathValue($account_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdGlossariesIdGet
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Glossary
     */
    public function accountsAccountIdGlossariesIdGet($account_id, $id)
    {
        list($response) = $this->accountsAccountIdGlossariesIdGetWithHttpInfo($account_id, $id);
        return $response;
    }

    /**
     * Operation accountsAccountIdGlossariesIdGetWithHttpInfo
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Glossary, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdGlossariesIdGetWithHttpInfo($account_id, $id)
    {
        $returnType = '\Swagger\Client\Model\Glossary';
        $request = $this->accountsAccountIdGlossariesIdGetRequest($account_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Glossary', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdGlossariesIdGetAsync
     *
     * 
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdGlossariesIdGetAsync($account_id, $id)
    {
        return $this->accountsAccountIdGlossariesIdGetAsyncWithHttpInfo($account_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountsAccountIdGlossariesIdGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdGlossariesIdGetAsyncWithHttpInfo($account_id, $id)
    {
        $returnType = '\Swagger\Client\Model\Glossary';
        $request = $this->accountsAccountIdGlossariesIdGetRequest($account_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountsAccountIdGlossariesIdGet'
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdGlossariesIdGetRequest($account_id, $id)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling accountsAccountIdGlossariesIdGet');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling accountsAccountIdGlossariesIdGet');
        }

        $resourcePath = '/accounts/{AccountId}/glossaries/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace('{' . 'AccountId' . '}', ObjectSerializer::toPathValue($account_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdGlossariesIdPatch
     *
     * @param string $name  (required)
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @param string $project_ids  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Glossary
     */
    public function accountsAccountIdGlossariesIdPatch($name, $account_id, $id, $project_ids = null)
    {
        list($response) = $this->accountsAccountIdGlossariesIdPatchWithHttpInfo($name, $account_id, $id, $project_ids);
        return $response;
    }

    /**
     * Operation accountsAccountIdGlossariesIdPatchWithHttpInfo
     *
     * @param string $name  (required)
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @param string $project_ids  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Glossary, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdGlossariesIdPatchWithHttpInfo($name, $account_id, $id, $project_ids = null)
    {
        $returnType = '\Swagger\Client\Model\Glossary';
        $request = $this->accountsAccountIdGlossariesIdPatchRequest($name, $account_id, $id, $project_ids);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Glossary', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdGlossariesIdPatchAsync
     *
     * 
     *
     * @param string $name  (required)
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @param string $project_ids  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdGlossariesIdPatchAsync($name, $account_id, $id, $project_ids = null)
    {
        return $this->accountsAccountIdGlossariesIdPatchAsyncWithHttpInfo($name, $account_id, $id, $project_ids)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountsAccountIdGlossariesIdPatchAsyncWithHttpInfo
     *
     * 
     *
     * @param string $name  (required)
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @param string $project_ids  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdGlossariesIdPatchAsyncWithHttpInfo($name, $account_id, $id, $project_ids = null)
    {
        $returnType = '\Swagger\Client\Model\Glossary';
        $request = $this->accountsAccountIdGlossariesIdPatchRequest($name, $account_id, $id, $project_ids);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountsAccountIdGlossariesIdPatch'
     *
     * @param string $name  (required)
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @param string $project_ids  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdGlossariesIdPatchRequest($name, $account_id, $id, $project_ids = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling accountsAccountIdGlossariesIdPatch');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling accountsAccountIdGlossariesIdPatch');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling accountsAccountIdGlossariesIdPatch');
        }

        $resourcePath = '/accounts/{AccountId}/glossaries/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($project_ids !== null) {
            $queryParams['project_ids'] = ObjectSerializer::toQueryValue($project_ids);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace('{' . 'AccountId' . '}', ObjectSerializer::toPathValue($account_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdGlossariesPost
     *
     * @param string $name  (required)
     * @param string $account_id AccountId (required)
     * @param string $project_ids  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Glossary
     */
    public function accountsAccountIdGlossariesPost($name, $account_id, $project_ids = null)
    {
        list($response) = $this->accountsAccountIdGlossariesPostWithHttpInfo($name, $account_id, $project_ids);
        return $response;
    }

    /**
     * Operation accountsAccountIdGlossariesPostWithHttpInfo
     *
     * @param string $name  (required)
     * @param string $account_id AccountId (required)
     * @param string $project_ids  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Glossary, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdGlossariesPostWithHttpInfo($name, $account_id, $project_ids = null)
    {
        $returnType = '\Swagger\Client\Model\Glossary';
        $request = $this->accountsAccountIdGlossariesPostRequest($name, $account_id, $project_ids);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Glossary', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdGlossariesPostAsync
     *
     * 
     *
     * @param string $name  (required)
     * @param string $account_id AccountId (required)
     * @param string $project_ids  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdGlossariesPostAsync($name, $account_id, $project_ids = null)
    {
        return $this->accountsAccountIdGlossariesPostAsyncWithHttpInfo($name, $account_id, $project_ids)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountsAccountIdGlossariesPostAsyncWithHttpInfo
     *
     * 
     *
     * @param string $name  (required)
     * @param string $account_id AccountId (required)
     * @param string $project_ids  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdGlossariesPostAsyncWithHttpInfo($name, $account_id, $project_ids = null)
    {
        $returnType = '\Swagger\Client\Model\Glossary';
        $request = $this->accountsAccountIdGlossariesPostRequest($name, $account_id, $project_ids);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountsAccountIdGlossariesPost'
     *
     * @param string $name  (required)
     * @param string $account_id AccountId (required)
     * @param string $project_ids  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdGlossariesPostRequest($name, $account_id, $project_ids = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling accountsAccountIdGlossariesPost');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling accountsAccountIdGlossariesPost');
        }

        $resourcePath = '/accounts/{AccountId}/glossaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($project_ids !== null) {
            $queryParams['project_ids'] = ObjectSerializer::toQueryValue($project_ids);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace('{' . 'AccountId' . '}', ObjectSerializer::toPathValue($account_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdInvitationsGet
     *
     * @param string $account_id AccountId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Invitation[]
     */
    public function accountsAccountIdInvitationsGet($account_id, $per_page = '25', $page = '1')
    {
        list($response) = $this->accountsAccountIdInvitationsGetWithHttpInfo($account_id, $per_page, $page);
        return $response;
    }

    /**
     * Operation accountsAccountIdInvitationsGetWithHttpInfo
     *
     * @param string $account_id AccountId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Invitation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdInvitationsGetWithHttpInfo($account_id, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Invitation[]';
        $request = $this->accountsAccountIdInvitationsGetRequest($account_id, $per_page, $page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Invitation[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdInvitationsGetAsync
     *
     * 
     *
     * @param string $account_id AccountId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdInvitationsGetAsync($account_id, $per_page = '25', $page = '1')
    {
        return $this->accountsAccountIdInvitationsGetAsyncWithHttpInfo($account_id, $per_page, $page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountsAccountIdInvitationsGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $account_id AccountId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdInvitationsGetAsyncWithHttpInfo($account_id, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Invitation[]';
        $request = $this->accountsAccountIdInvitationsGetRequest($account_id, $per_page, $page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountsAccountIdInvitationsGet'
     *
     * @param string $account_id AccountId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdInvitationsGetRequest($account_id, $per_page = '25', $page = '1')
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling accountsAccountIdInvitationsGet');
        }

        $resourcePath = '/accounts/{AccountId}/invitations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace('{' . 'AccountId' . '}', ObjectSerializer::toPathValue($account_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdInvitationsIdDelete
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountsAccountIdInvitationsIdDelete($account_id, $id)
    {
        $this->accountsAccountIdInvitationsIdDeleteWithHttpInfo($account_id, $id);
    }

    /**
     * Operation accountsAccountIdInvitationsIdDeleteWithHttpInfo
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdInvitationsIdDeleteWithHttpInfo($account_id, $id)
    {
        $returnType = '';
        $request = $this->accountsAccountIdInvitationsIdDeleteRequest($account_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdInvitationsIdDeleteAsync
     *
     * 
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdInvitationsIdDeleteAsync($account_id, $id)
    {
        return $this->accountsAccountIdInvitationsIdDeleteAsyncWithHttpInfo($account_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountsAccountIdInvitationsIdDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdInvitationsIdDeleteAsyncWithHttpInfo($account_id, $id)
    {
        $returnType = '';
        $request = $this->accountsAccountIdInvitationsIdDeleteRequest($account_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountsAccountIdInvitationsIdDelete'
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdInvitationsIdDeleteRequest($account_id, $id)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling accountsAccountIdInvitationsIdDelete');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling accountsAccountIdInvitationsIdDelete');
        }

        $resourcePath = '/accounts/{AccountId}/invitations/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace('{' . 'AccountId' . '}', ObjectSerializer::toPathValue($account_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdInvitationsIdGet
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Invitation
     */
    public function accountsAccountIdInvitationsIdGet($account_id, $id)
    {
        list($response) = $this->accountsAccountIdInvitationsIdGetWithHttpInfo($account_id, $id);
        return $response;
    }

    /**
     * Operation accountsAccountIdInvitationsIdGetWithHttpInfo
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Invitation, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdInvitationsIdGetWithHttpInfo($account_id, $id)
    {
        $returnType = '\Swagger\Client\Model\Invitation';
        $request = $this->accountsAccountIdInvitationsIdGetRequest($account_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Invitation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdInvitationsIdGetAsync
     *
     * 
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdInvitationsIdGetAsync($account_id, $id)
    {
        return $this->accountsAccountIdInvitationsIdGetAsyncWithHttpInfo($account_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountsAccountIdInvitationsIdGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdInvitationsIdGetAsyncWithHttpInfo($account_id, $id)
    {
        $returnType = '\Swagger\Client\Model\Invitation';
        $request = $this->accountsAccountIdInvitationsIdGetRequest($account_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountsAccountIdInvitationsIdGet'
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdInvitationsIdGetRequest($account_id, $id)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling accountsAccountIdInvitationsIdGet');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling accountsAccountIdInvitationsIdGet');
        }

        $resourcePath = '/accounts/{AccountId}/invitations/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace('{' . 'AccountId' . '}', ObjectSerializer::toPathValue($account_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdInvitationsIdPatch
     *
     * @param string $role  (required)
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @param string $project_ids  (optional)
     * @param string $locale_ids  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Invitation
     */
    public function accountsAccountIdInvitationsIdPatch($role, $account_id, $id, $project_ids = null, $locale_ids = null)
    {
        list($response) = $this->accountsAccountIdInvitationsIdPatchWithHttpInfo($role, $account_id, $id, $project_ids, $locale_ids);
        return $response;
    }

    /**
     * Operation accountsAccountIdInvitationsIdPatchWithHttpInfo
     *
     * @param string $role  (required)
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @param string $project_ids  (optional)
     * @param string $locale_ids  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Invitation, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdInvitationsIdPatchWithHttpInfo($role, $account_id, $id, $project_ids = null, $locale_ids = null)
    {
        $returnType = '\Swagger\Client\Model\Invitation';
        $request = $this->accountsAccountIdInvitationsIdPatchRequest($role, $account_id, $id, $project_ids, $locale_ids);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Invitation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdInvitationsIdPatchAsync
     *
     * 
     *
     * @param string $role  (required)
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @param string $project_ids  (optional)
     * @param string $locale_ids  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdInvitationsIdPatchAsync($role, $account_id, $id, $project_ids = null, $locale_ids = null)
    {
        return $this->accountsAccountIdInvitationsIdPatchAsyncWithHttpInfo($role, $account_id, $id, $project_ids, $locale_ids)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountsAccountIdInvitationsIdPatchAsyncWithHttpInfo
     *
     * 
     *
     * @param string $role  (required)
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @param string $project_ids  (optional)
     * @param string $locale_ids  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdInvitationsIdPatchAsyncWithHttpInfo($role, $account_id, $id, $project_ids = null, $locale_ids = null)
    {
        $returnType = '\Swagger\Client\Model\Invitation';
        $request = $this->accountsAccountIdInvitationsIdPatchRequest($role, $account_id, $id, $project_ids, $locale_ids);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountsAccountIdInvitationsIdPatch'
     *
     * @param string $role  (required)
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @param string $project_ids  (optional)
     * @param string $locale_ids  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdInvitationsIdPatchRequest($role, $account_id, $id, $project_ids = null, $locale_ids = null)
    {
        // verify the required parameter 'role' is set
        if ($role === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role when calling accountsAccountIdInvitationsIdPatch');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling accountsAccountIdInvitationsIdPatch');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling accountsAccountIdInvitationsIdPatch');
        }

        $resourcePath = '/accounts/{AccountId}/invitations/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($role !== null) {
            $queryParams['role'] = ObjectSerializer::toQueryValue($role);
        }
        // query params
        if ($project_ids !== null) {
            $queryParams['project_ids'] = ObjectSerializer::toQueryValue($project_ids);
        }
        // query params
        if ($locale_ids !== null) {
            $queryParams['locale_ids'] = ObjectSerializer::toQueryValue($locale_ids);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace('{' . 'AccountId' . '}', ObjectSerializer::toPathValue($account_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdInvitationsIdResendPost
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Invitation
     */
    public function accountsAccountIdInvitationsIdResendPost($account_id, $id)
    {
        list($response) = $this->accountsAccountIdInvitationsIdResendPostWithHttpInfo($account_id, $id);
        return $response;
    }

    /**
     * Operation accountsAccountIdInvitationsIdResendPostWithHttpInfo
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Invitation, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdInvitationsIdResendPostWithHttpInfo($account_id, $id)
    {
        $returnType = '\Swagger\Client\Model\Invitation';
        $request = $this->accountsAccountIdInvitationsIdResendPostRequest($account_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Invitation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdInvitationsIdResendPostAsync
     *
     * 
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdInvitationsIdResendPostAsync($account_id, $id)
    {
        return $this->accountsAccountIdInvitationsIdResendPostAsyncWithHttpInfo($account_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountsAccountIdInvitationsIdResendPostAsyncWithHttpInfo
     *
     * 
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdInvitationsIdResendPostAsyncWithHttpInfo($account_id, $id)
    {
        $returnType = '\Swagger\Client\Model\Invitation';
        $request = $this->accountsAccountIdInvitationsIdResendPostRequest($account_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountsAccountIdInvitationsIdResendPost'
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdInvitationsIdResendPostRequest($account_id, $id)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling accountsAccountIdInvitationsIdResendPost');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling accountsAccountIdInvitationsIdResendPost');
        }

        $resourcePath = '/accounts/{AccountId}/invitations/{Id}/resend';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace('{' . 'AccountId' . '}', ObjectSerializer::toPathValue($account_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdInvitationsPost
     *
     * @param string $email  (required)
     * @param string $role  (required)
     * @param string $account_id AccountId (required)
     * @param string $project_ids  (optional)
     * @param string $locale_ids  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Invitation
     */
    public function accountsAccountIdInvitationsPost($email, $role, $account_id, $project_ids = null, $locale_ids = null)
    {
        list($response) = $this->accountsAccountIdInvitationsPostWithHttpInfo($email, $role, $account_id, $project_ids, $locale_ids);
        return $response;
    }

    /**
     * Operation accountsAccountIdInvitationsPostWithHttpInfo
     *
     * @param string $email  (required)
     * @param string $role  (required)
     * @param string $account_id AccountId (required)
     * @param string $project_ids  (optional)
     * @param string $locale_ids  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Invitation, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdInvitationsPostWithHttpInfo($email, $role, $account_id, $project_ids = null, $locale_ids = null)
    {
        $returnType = '\Swagger\Client\Model\Invitation';
        $request = $this->accountsAccountIdInvitationsPostRequest($email, $role, $account_id, $project_ids, $locale_ids);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Invitation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdInvitationsPostAsync
     *
     * 
     *
     * @param string $email  (required)
     * @param string $role  (required)
     * @param string $account_id AccountId (required)
     * @param string $project_ids  (optional)
     * @param string $locale_ids  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdInvitationsPostAsync($email, $role, $account_id, $project_ids = null, $locale_ids = null)
    {
        return $this->accountsAccountIdInvitationsPostAsyncWithHttpInfo($email, $role, $account_id, $project_ids, $locale_ids)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountsAccountIdInvitationsPostAsyncWithHttpInfo
     *
     * 
     *
     * @param string $email  (required)
     * @param string $role  (required)
     * @param string $account_id AccountId (required)
     * @param string $project_ids  (optional)
     * @param string $locale_ids  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdInvitationsPostAsyncWithHttpInfo($email, $role, $account_id, $project_ids = null, $locale_ids = null)
    {
        $returnType = '\Swagger\Client\Model\Invitation';
        $request = $this->accountsAccountIdInvitationsPostRequest($email, $role, $account_id, $project_ids, $locale_ids);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountsAccountIdInvitationsPost'
     *
     * @param string $email  (required)
     * @param string $role  (required)
     * @param string $account_id AccountId (required)
     * @param string $project_ids  (optional)
     * @param string $locale_ids  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdInvitationsPostRequest($email, $role, $account_id, $project_ids = null, $locale_ids = null)
    {
        // verify the required parameter 'email' is set
        if ($email === null) {
            throw new \InvalidArgumentException('Missing the required parameter $email when calling accountsAccountIdInvitationsPost');
        }
        // verify the required parameter 'role' is set
        if ($role === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role when calling accountsAccountIdInvitationsPost');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling accountsAccountIdInvitationsPost');
        }

        $resourcePath = '/accounts/{AccountId}/invitations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email);
        }
        // query params
        if ($role !== null) {
            $queryParams['role'] = ObjectSerializer::toQueryValue($role);
        }
        // query params
        if ($project_ids !== null) {
            $queryParams['project_ids'] = ObjectSerializer::toQueryValue($project_ids);
        }
        // query params
        if ($locale_ids !== null) {
            $queryParams['locale_ids'] = ObjectSerializer::toQueryValue($locale_ids);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace('{' . 'AccountId' . '}', ObjectSerializer::toPathValue($account_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdMembersGet
     *
     * @param string $account_id AccountId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Member[]
     */
    public function accountsAccountIdMembersGet($account_id, $per_page = '25', $page = '1')
    {
        list($response) = $this->accountsAccountIdMembersGetWithHttpInfo($account_id, $per_page, $page);
        return $response;
    }

    /**
     * Operation accountsAccountIdMembersGetWithHttpInfo
     *
     * @param string $account_id AccountId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Member[], HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdMembersGetWithHttpInfo($account_id, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Member[]';
        $request = $this->accountsAccountIdMembersGetRequest($account_id, $per_page, $page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Member[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdMembersGetAsync
     *
     * 
     *
     * @param string $account_id AccountId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMembersGetAsync($account_id, $per_page = '25', $page = '1')
    {
        return $this->accountsAccountIdMembersGetAsyncWithHttpInfo($account_id, $per_page, $page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountsAccountIdMembersGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $account_id AccountId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMembersGetAsyncWithHttpInfo($account_id, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Member[]';
        $request = $this->accountsAccountIdMembersGetRequest($account_id, $per_page, $page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountsAccountIdMembersGet'
     *
     * @param string $account_id AccountId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdMembersGetRequest($account_id, $per_page = '25', $page = '1')
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling accountsAccountIdMembersGet');
        }

        $resourcePath = '/accounts/{AccountId}/members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace('{' . 'AccountId' . '}', ObjectSerializer::toPathValue($account_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdMembersIdDelete
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountsAccountIdMembersIdDelete($account_id, $id)
    {
        $this->accountsAccountIdMembersIdDeleteWithHttpInfo($account_id, $id);
    }

    /**
     * Operation accountsAccountIdMembersIdDeleteWithHttpInfo
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdMembersIdDeleteWithHttpInfo($account_id, $id)
    {
        $returnType = '';
        $request = $this->accountsAccountIdMembersIdDeleteRequest($account_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdMembersIdDeleteAsync
     *
     * 
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMembersIdDeleteAsync($account_id, $id)
    {
        return $this->accountsAccountIdMembersIdDeleteAsyncWithHttpInfo($account_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountsAccountIdMembersIdDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMembersIdDeleteAsyncWithHttpInfo($account_id, $id)
    {
        $returnType = '';
        $request = $this->accountsAccountIdMembersIdDeleteRequest($account_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountsAccountIdMembersIdDelete'
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdMembersIdDeleteRequest($account_id, $id)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling accountsAccountIdMembersIdDelete');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling accountsAccountIdMembersIdDelete');
        }

        $resourcePath = '/accounts/{AccountId}/members/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace('{' . 'AccountId' . '}', ObjectSerializer::toPathValue($account_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdMembersIdGet
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Member
     */
    public function accountsAccountIdMembersIdGet($account_id, $id)
    {
        list($response) = $this->accountsAccountIdMembersIdGetWithHttpInfo($account_id, $id);
        return $response;
    }

    /**
     * Operation accountsAccountIdMembersIdGetWithHttpInfo
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Member, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdMembersIdGetWithHttpInfo($account_id, $id)
    {
        $returnType = '\Swagger\Client\Model\Member';
        $request = $this->accountsAccountIdMembersIdGetRequest($account_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Member', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdMembersIdGetAsync
     *
     * 
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMembersIdGetAsync($account_id, $id)
    {
        return $this->accountsAccountIdMembersIdGetAsyncWithHttpInfo($account_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountsAccountIdMembersIdGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMembersIdGetAsyncWithHttpInfo($account_id, $id)
    {
        $returnType = '\Swagger\Client\Model\Member';
        $request = $this->accountsAccountIdMembersIdGetRequest($account_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountsAccountIdMembersIdGet'
     *
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdMembersIdGetRequest($account_id, $id)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling accountsAccountIdMembersIdGet');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling accountsAccountIdMembersIdGet');
        }

        $resourcePath = '/accounts/{AccountId}/members/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace('{' . 'AccountId' . '}', ObjectSerializer::toPathValue($account_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdMembersIdPatch
     *
     * @param string $role  (required)
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @param string $project_ids  (optional)
     * @param string $locale_ids  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Member
     */
    public function accountsAccountIdMembersIdPatch($role, $account_id, $id, $project_ids = null, $locale_ids = null)
    {
        list($response) = $this->accountsAccountIdMembersIdPatchWithHttpInfo($role, $account_id, $id, $project_ids, $locale_ids);
        return $response;
    }

    /**
     * Operation accountsAccountIdMembersIdPatchWithHttpInfo
     *
     * @param string $role  (required)
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @param string $project_ids  (optional)
     * @param string $locale_ids  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Member, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdMembersIdPatchWithHttpInfo($role, $account_id, $id, $project_ids = null, $locale_ids = null)
    {
        $returnType = '\Swagger\Client\Model\Member';
        $request = $this->accountsAccountIdMembersIdPatchRequest($role, $account_id, $id, $project_ids, $locale_ids);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Member', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdMembersIdPatchAsync
     *
     * 
     *
     * @param string $role  (required)
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @param string $project_ids  (optional)
     * @param string $locale_ids  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMembersIdPatchAsync($role, $account_id, $id, $project_ids = null, $locale_ids = null)
    {
        return $this->accountsAccountIdMembersIdPatchAsyncWithHttpInfo($role, $account_id, $id, $project_ids, $locale_ids)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountsAccountIdMembersIdPatchAsyncWithHttpInfo
     *
     * 
     *
     * @param string $role  (required)
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @param string $project_ids  (optional)
     * @param string $locale_ids  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMembersIdPatchAsyncWithHttpInfo($role, $account_id, $id, $project_ids = null, $locale_ids = null)
    {
        $returnType = '\Swagger\Client\Model\Member';
        $request = $this->accountsAccountIdMembersIdPatchRequest($role, $account_id, $id, $project_ids, $locale_ids);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountsAccountIdMembersIdPatch'
     *
     * @param string $role  (required)
     * @param string $account_id AccountId (required)
     * @param string $id Id (required)
     * @param string $project_ids  (optional)
     * @param string $locale_ids  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdMembersIdPatchRequest($role, $account_id, $id, $project_ids = null, $locale_ids = null)
    {
        // verify the required parameter 'role' is set
        if ($role === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role when calling accountsAccountIdMembersIdPatch');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling accountsAccountIdMembersIdPatch');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling accountsAccountIdMembersIdPatch');
        }

        $resourcePath = '/accounts/{AccountId}/members/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($role !== null) {
            $queryParams['role'] = ObjectSerializer::toQueryValue($role);
        }
        // query params
        if ($project_ids !== null) {
            $queryParams['project_ids'] = ObjectSerializer::toQueryValue($project_ids);
        }
        // query params
        if ($locale_ids !== null) {
            $queryParams['locale_ids'] = ObjectSerializer::toQueryValue($locale_ids);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace('{' . 'AccountId' . '}', ObjectSerializer::toPathValue($account_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsGet
     *
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Account[]
     */
    public function accountsGet($per_page = '25', $page = '1')
    {
        list($response) = $this->accountsGetWithHttpInfo($per_page, $page);
        return $response;
    }

    /**
     * Operation accountsGetWithHttpInfo
     *
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Account[], HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsGetWithHttpInfo($per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Account[]';
        $request = $this->accountsGetRequest($per_page, $page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Account[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsGetAsync
     *
     * 
     *
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetAsync($per_page = '25', $page = '1')
    {
        return $this->accountsGetAsyncWithHttpInfo($per_page, $page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountsGetAsyncWithHttpInfo
     *
     * 
     *
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetAsyncWithHttpInfo($per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Account[]';
        $request = $this->accountsGetRequest($per_page, $page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountsGet'
     *
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsGetRequest($per_page = '25', $page = '1')
    {

        $resourcePath = '/accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsIdGet
     *
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Account
     */
    public function accountsIdGet($id)
    {
        list($response) = $this->accountsIdGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation accountsIdGetWithHttpInfo
     *
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Account, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsIdGetWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\Account';
        $request = $this->accountsIdGetRequest($id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Account', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsIdGetAsync
     *
     * 
     *
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsIdGetAsync($id)
    {
        return $this->accountsIdGetAsyncWithHttpInfo($id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountsIdGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsIdGetAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\Account';
        $request = $this->accountsIdGetRequest($id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountsIdGet'
     *
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsIdGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling accountsIdGet');
        }

        $resourcePath = '/accounts/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation authorizationsGet
     *
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Authorization[]
     */
    public function authorizationsGet($per_page = '25', $page = '1')
    {
        list($response) = $this->authorizationsGetWithHttpInfo($per_page, $page);
        return $response;
    }

    /**
     * Operation authorizationsGetWithHttpInfo
     *
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Authorization[], HTTP status code, HTTP response headers (array of strings)
     */
    public function authorizationsGetWithHttpInfo($per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Authorization[]';
        $request = $this->authorizationsGetRequest($per_page, $page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Authorization[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authorizationsGetAsync
     *
     * 
     *
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authorizationsGetAsync($per_page = '25', $page = '1')
    {
        return $this->authorizationsGetAsyncWithHttpInfo($per_page, $page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation authorizationsGetAsyncWithHttpInfo
     *
     * 
     *
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authorizationsGetAsyncWithHttpInfo($per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Authorization[]';
        $request = $this->authorizationsGetRequest($per_page, $page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'authorizationsGet'
     *
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function authorizationsGetRequest($per_page = '25', $page = '1')
    {

        $resourcePath = '/authorizations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation authorizationsIdDelete
     *
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function authorizationsIdDelete($id)
    {
        $this->authorizationsIdDeleteWithHttpInfo($id);
    }

    /**
     * Operation authorizationsIdDeleteWithHttpInfo
     *
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function authorizationsIdDeleteWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->authorizationsIdDeleteRequest($id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation authorizationsIdDeleteAsync
     *
     * 
     *
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authorizationsIdDeleteAsync($id)
    {
        return $this->authorizationsIdDeleteAsyncWithHttpInfo($id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation authorizationsIdDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authorizationsIdDeleteAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->authorizationsIdDeleteRequest($id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'authorizationsIdDelete'
     *
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function authorizationsIdDeleteRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling authorizationsIdDelete');
        }

        $resourcePath = '/authorizations/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation authorizationsIdGet
     *
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Authorization
     */
    public function authorizationsIdGet($id)
    {
        list($response) = $this->authorizationsIdGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation authorizationsIdGetWithHttpInfo
     *
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Authorization, HTTP status code, HTTP response headers (array of strings)
     */
    public function authorizationsIdGetWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\Authorization';
        $request = $this->authorizationsIdGetRequest($id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Authorization', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authorizationsIdGetAsync
     *
     * 
     *
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authorizationsIdGetAsync($id)
    {
        return $this->authorizationsIdGetAsyncWithHttpInfo($id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation authorizationsIdGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authorizationsIdGetAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\Authorization';
        $request = $this->authorizationsIdGetRequest($id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'authorizationsIdGet'
     *
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function authorizationsIdGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling authorizationsIdGet');
        }

        $resourcePath = '/authorizations/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation authorizationsIdPatch
     *
     * @param string $note  (required)
     * @param string $id Id (required)
     * @param string $scopes  (optional)
     * @param \DateTime $expires_at  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Authorization
     */
    public function authorizationsIdPatch($note, $id, $scopes = null, $expires_at = null)
    {
        list($response) = $this->authorizationsIdPatchWithHttpInfo($note, $id, $scopes, $expires_at);
        return $response;
    }

    /**
     * Operation authorizationsIdPatchWithHttpInfo
     *
     * @param string $note  (required)
     * @param string $id Id (required)
     * @param string $scopes  (optional)
     * @param \DateTime $expires_at  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Authorization, HTTP status code, HTTP response headers (array of strings)
     */
    public function authorizationsIdPatchWithHttpInfo($note, $id, $scopes = null, $expires_at = null)
    {
        $returnType = '\Swagger\Client\Model\Authorization';
        $request = $this->authorizationsIdPatchRequest($note, $id, $scopes, $expires_at);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Authorization', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authorizationsIdPatchAsync
     *
     * 
     *
     * @param string $note  (required)
     * @param string $id Id (required)
     * @param string $scopes  (optional)
     * @param \DateTime $expires_at  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authorizationsIdPatchAsync($note, $id, $scopes = null, $expires_at = null)
    {
        return $this->authorizationsIdPatchAsyncWithHttpInfo($note, $id, $scopes, $expires_at)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation authorizationsIdPatchAsyncWithHttpInfo
     *
     * 
     *
     * @param string $note  (required)
     * @param string $id Id (required)
     * @param string $scopes  (optional)
     * @param \DateTime $expires_at  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authorizationsIdPatchAsyncWithHttpInfo($note, $id, $scopes = null, $expires_at = null)
    {
        $returnType = '\Swagger\Client\Model\Authorization';
        $request = $this->authorizationsIdPatchRequest($note, $id, $scopes, $expires_at);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'authorizationsIdPatch'
     *
     * @param string $note  (required)
     * @param string $id Id (required)
     * @param string $scopes  (optional)
     * @param \DateTime $expires_at  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function authorizationsIdPatchRequest($note, $id, $scopes = null, $expires_at = null)
    {
        // verify the required parameter 'note' is set
        if ($note === null) {
            throw new \InvalidArgumentException('Missing the required parameter $note when calling authorizationsIdPatch');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling authorizationsIdPatch');
        }

        $resourcePath = '/authorizations/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($note !== null) {
            $queryParams['note'] = ObjectSerializer::toQueryValue($note);
        }
        // query params
        if ($scopes !== null) {
            $queryParams['scopes'] = ObjectSerializer::toQueryValue($scopes);
        }
        // query params
        if ($expires_at !== null) {
            $queryParams['expires_at'] = ObjectSerializer::toQueryValue($expires_at);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation authorizationsPost
     *
     * @param string $note  (required)
     * @param string $scopes  (optional)
     * @param \DateTime $expires_at  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AuthorizationWithToken
     */
    public function authorizationsPost($note, $scopes = null, $expires_at = null)
    {
        list($response) = $this->authorizationsPostWithHttpInfo($note, $scopes, $expires_at);
        return $response;
    }

    /**
     * Operation authorizationsPostWithHttpInfo
     *
     * @param string $note  (required)
     * @param string $scopes  (optional)
     * @param \DateTime $expires_at  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AuthorizationWithToken, HTTP status code, HTTP response headers (array of strings)
     */
    public function authorizationsPostWithHttpInfo($note, $scopes = null, $expires_at = null)
    {
        $returnType = '\Swagger\Client\Model\AuthorizationWithToken';
        $request = $this->authorizationsPostRequest($note, $scopes, $expires_at);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\AuthorizationWithToken', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authorizationsPostAsync
     *
     * 
     *
     * @param string $note  (required)
     * @param string $scopes  (optional)
     * @param \DateTime $expires_at  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authorizationsPostAsync($note, $scopes = null, $expires_at = null)
    {
        return $this->authorizationsPostAsyncWithHttpInfo($note, $scopes, $expires_at)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation authorizationsPostAsyncWithHttpInfo
     *
     * 
     *
     * @param string $note  (required)
     * @param string $scopes  (optional)
     * @param \DateTime $expires_at  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authorizationsPostAsyncWithHttpInfo($note, $scopes = null, $expires_at = null)
    {
        $returnType = '\Swagger\Client\Model\AuthorizationWithToken';
        $request = $this->authorizationsPostRequest($note, $scopes, $expires_at);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'authorizationsPost'
     *
     * @param string $note  (required)
     * @param string $scopes  (optional)
     * @param \DateTime $expires_at  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function authorizationsPostRequest($note, $scopes = null, $expires_at = null)
    {
        // verify the required parameter 'note' is set
        if ($note === null) {
            throw new \InvalidArgumentException('Missing the required parameter $note when calling authorizationsPost');
        }

        $resourcePath = '/authorizations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($note !== null) {
            $queryParams['note'] = ObjectSerializer::toQueryValue($note);
        }
        // query params
        if ($scopes !== null) {
            $queryParams['scopes'] = ObjectSerializer::toQueryValue($scopes);
        }
        // query params
        if ($expires_at !== null) {
            $queryParams['expires_at'] = ObjectSerializer::toQueryValue($expires_at);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation formatsGet
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Format[]
     */
    public function formatsGet()
    {
        list($response) = $this->formatsGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation formatsGetWithHttpInfo
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Format[], HTTP status code, HTTP response headers (array of strings)
     */
    public function formatsGetWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\Format[]';
        $request = $this->formatsGetRequest();

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Format[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation formatsGetAsync
     *
     * 
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formatsGetAsync()
    {
        return $this->formatsGetAsyncWithHttpInfo()->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation formatsGetAsyncWithHttpInfo
     *
     * 
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function formatsGetAsyncWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\Format[]';
        $request = $this->formatsGetRequest();

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'formatsGet'
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function formatsGetRequest()
    {

        $resourcePath = '/formats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsGet
     *
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Project[]
     */
    public function projectsGet($per_page = '25', $page = '1')
    {
        list($response) = $this->projectsGetWithHttpInfo($per_page, $page);
        return $response;
    }

    /**
     * Operation projectsGetWithHttpInfo
     *
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Project[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsGetWithHttpInfo($per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Project[]';
        $request = $this->projectsGetRequest($per_page, $page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Project[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsGetAsync
     *
     * 
     *
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsGetAsync($per_page = '25', $page = '1')
    {
        return $this->projectsGetAsyncWithHttpInfo($per_page, $page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsGetAsyncWithHttpInfo
     *
     * 
     *
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsGetAsyncWithHttpInfo($per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Project[]';
        $request = $this->projectsGetRequest($per_page, $page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsGet'
     *
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsGetRequest($per_page = '25', $page = '1')
    {

        $resourcePath = '/projects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsIdDelete
     *
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function projectsIdDelete($id)
    {
        $this->projectsIdDeleteWithHttpInfo($id);
    }

    /**
     * Operation projectsIdDeleteWithHttpInfo
     *
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsIdDeleteWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->projectsIdDeleteRequest($id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectsIdDeleteAsync
     *
     * 
     *
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsIdDeleteAsync($id)
    {
        return $this->projectsIdDeleteAsyncWithHttpInfo($id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsIdDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsIdDeleteAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->projectsIdDeleteRequest($id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsIdDelete'
     *
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsIdDeleteRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsIdDelete');
        }

        $resourcePath = '/projects/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsIdGet
     *
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Project
     */
    public function projectsIdGet($id)
    {
        list($response) = $this->projectsIdGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation projectsIdGetWithHttpInfo
     *
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Project, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsIdGetWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\Project';
        $request = $this->projectsIdGetRequest($id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Project', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsIdGetAsync
     *
     * 
     *
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsIdGetAsync($id)
    {
        return $this->projectsIdGetAsyncWithHttpInfo($id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsIdGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsIdGetAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\Project';
        $request = $this->projectsIdGetRequest($id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsIdGet'
     *
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsIdGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsIdGet');
        }

        $resourcePath = '/projects/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsIdPatch
     *
     * @param string $name  (required)
     * @param string $id Id (required)
     * @param string $main_format  (optional)
     * @param bool $shares_translation_memory  (optional)
     * @param string $account_id  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ProjectDetails
     */
    public function projectsIdPatch($name, $id, $main_format = null, $shares_translation_memory = null, $account_id = null)
    {
        list($response) = $this->projectsIdPatchWithHttpInfo($name, $id, $main_format, $shares_translation_memory, $account_id);
        return $response;
    }

    /**
     * Operation projectsIdPatchWithHttpInfo
     *
     * @param string $name  (required)
     * @param string $id Id (required)
     * @param string $main_format  (optional)
     * @param bool $shares_translation_memory  (optional)
     * @param string $account_id  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ProjectDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsIdPatchWithHttpInfo($name, $id, $main_format = null, $shares_translation_memory = null, $account_id = null)
    {
        $returnType = '\Swagger\Client\Model\ProjectDetails';
        $request = $this->projectsIdPatchRequest($name, $id, $main_format, $shares_translation_memory, $account_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProjectDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsIdPatchAsync
     *
     * 
     *
     * @param string $name  (required)
     * @param string $id Id (required)
     * @param string $main_format  (optional)
     * @param bool $shares_translation_memory  (optional)
     * @param string $account_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsIdPatchAsync($name, $id, $main_format = null, $shares_translation_memory = null, $account_id = null)
    {
        return $this->projectsIdPatchAsyncWithHttpInfo($name, $id, $main_format, $shares_translation_memory, $account_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsIdPatchAsyncWithHttpInfo
     *
     * 
     *
     * @param string $name  (required)
     * @param string $id Id (required)
     * @param string $main_format  (optional)
     * @param bool $shares_translation_memory  (optional)
     * @param string $account_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsIdPatchAsyncWithHttpInfo($name, $id, $main_format = null, $shares_translation_memory = null, $account_id = null)
    {
        $returnType = '\Swagger\Client\Model\ProjectDetails';
        $request = $this->projectsIdPatchRequest($name, $id, $main_format, $shares_translation_memory, $account_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsIdPatch'
     *
     * @param string $name  (required)
     * @param string $id Id (required)
     * @param string $main_format  (optional)
     * @param bool $shares_translation_memory  (optional)
     * @param string $account_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsIdPatchRequest($name, $id, $main_format = null, $shares_translation_memory = null, $account_id = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling projectsIdPatch');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsIdPatch');
        }

        $resourcePath = '/projects/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($main_format !== null) {
            $queryParams['main_format'] = ObjectSerializer::toQueryValue($main_format);
        }
        // query params
        if ($shares_translation_memory !== null) {
            $queryParams['shares_translation_memory'] = ObjectSerializer::toQueryValue($shares_translation_memory);
        }
        // query params
        if ($account_id !== null) {
            $queryParams['account_id'] = ObjectSerializer::toQueryValue($account_id);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsPost
     *
     * @param string $name  (required)
     * @param string $main_format  (optional)
     * @param bool $shares_translation_memory  (optional)
     * @param string $account_id  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ProjectDetails
     */
    public function projectsPost($name, $main_format = null, $shares_translation_memory = null, $account_id = null)
    {
        list($response) = $this->projectsPostWithHttpInfo($name, $main_format, $shares_translation_memory, $account_id);
        return $response;
    }

    /**
     * Operation projectsPostWithHttpInfo
     *
     * @param string $name  (required)
     * @param string $main_format  (optional)
     * @param bool $shares_translation_memory  (optional)
     * @param string $account_id  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ProjectDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsPostWithHttpInfo($name, $main_format = null, $shares_translation_memory = null, $account_id = null)
    {
        $returnType = '\Swagger\Client\Model\ProjectDetails';
        $request = $this->projectsPostRequest($name, $main_format, $shares_translation_memory, $account_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProjectDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsPostAsync
     *
     * 
     *
     * @param string $name  (required)
     * @param string $main_format  (optional)
     * @param bool $shares_translation_memory  (optional)
     * @param string $account_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsPostAsync($name, $main_format = null, $shares_translation_memory = null, $account_id = null)
    {
        return $this->projectsPostAsyncWithHttpInfo($name, $main_format, $shares_translation_memory, $account_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsPostAsyncWithHttpInfo
     *
     * 
     *
     * @param string $name  (required)
     * @param string $main_format  (optional)
     * @param bool $shares_translation_memory  (optional)
     * @param string $account_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsPostAsyncWithHttpInfo($name, $main_format = null, $shares_translation_memory = null, $account_id = null)
    {
        $returnType = '\Swagger\Client\Model\ProjectDetails';
        $request = $this->projectsPostRequest($name, $main_format, $shares_translation_memory, $account_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsPost'
     *
     * @param string $name  (required)
     * @param string $main_format  (optional)
     * @param bool $shares_translation_memory  (optional)
     * @param string $account_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsPostRequest($name, $main_format = null, $shares_translation_memory = null, $account_id = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling projectsPost');
        }

        $resourcePath = '/projects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($main_format !== null) {
            $queryParams['main_format'] = ObjectSerializer::toQueryValue($main_format);
        }
        // query params
        if ($shares_translation_memory !== null) {
            $queryParams['shares_translation_memory'] = ObjectSerializer::toQueryValue($shares_translation_memory);
        }
        // query params
        if ($account_id !== null) {
            $queryParams['account_id'] = ObjectSerializer::toQueryValue($account_id);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdBlacklistedKeysGet
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BlacklistedKey[]
     */
    public function projectsProjectIdBlacklistedKeysGet($project_id, $per_page = '25', $page = '1')
    {
        list($response) = $this->projectsProjectIdBlacklistedKeysGetWithHttpInfo($project_id, $per_page, $page);
        return $response;
    }

    /**
     * Operation projectsProjectIdBlacklistedKeysGetWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BlacklistedKey[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdBlacklistedKeysGetWithHttpInfo($project_id, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\BlacklistedKey[]';
        $request = $this->projectsProjectIdBlacklistedKeysGetRequest($project_id, $per_page, $page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\BlacklistedKey[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdBlacklistedKeysGetAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdBlacklistedKeysGetAsync($project_id, $per_page = '25', $page = '1')
    {
        return $this->projectsProjectIdBlacklistedKeysGetAsyncWithHttpInfo($project_id, $per_page, $page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdBlacklistedKeysGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdBlacklistedKeysGetAsyncWithHttpInfo($project_id, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\BlacklistedKey[]';
        $request = $this->projectsProjectIdBlacklistedKeysGetRequest($project_id, $per_page, $page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdBlacklistedKeysGet'
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdBlacklistedKeysGetRequest($project_id, $per_page = '25', $page = '1')
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdBlacklistedKeysGet');
        }

        $resourcePath = '/projects/{ProjectId}/blacklisted_keys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdBlacklistedKeysIdDelete
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function projectsProjectIdBlacklistedKeysIdDelete($project_id, $id)
    {
        $this->projectsProjectIdBlacklistedKeysIdDeleteWithHttpInfo($project_id, $id);
    }

    /**
     * Operation projectsProjectIdBlacklistedKeysIdDeleteWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdBlacklistedKeysIdDeleteWithHttpInfo($project_id, $id)
    {
        $returnType = '';
        $request = $this->projectsProjectIdBlacklistedKeysIdDeleteRequest($project_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdBlacklistedKeysIdDeleteAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdBlacklistedKeysIdDeleteAsync($project_id, $id)
    {
        return $this->projectsProjectIdBlacklistedKeysIdDeleteAsyncWithHttpInfo($project_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdBlacklistedKeysIdDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdBlacklistedKeysIdDeleteAsyncWithHttpInfo($project_id, $id)
    {
        $returnType = '';
        $request = $this->projectsProjectIdBlacklistedKeysIdDeleteRequest($project_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdBlacklistedKeysIdDelete'
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdBlacklistedKeysIdDeleteRequest($project_id, $id)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdBlacklistedKeysIdDelete');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdBlacklistedKeysIdDelete');
        }

        $resourcePath = '/projects/{ProjectId}/blacklisted_keys/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdBlacklistedKeysIdGet
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BlacklistedKey
     */
    public function projectsProjectIdBlacklistedKeysIdGet($project_id, $id)
    {
        list($response) = $this->projectsProjectIdBlacklistedKeysIdGetWithHttpInfo($project_id, $id);
        return $response;
    }

    /**
     * Operation projectsProjectIdBlacklistedKeysIdGetWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BlacklistedKey, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdBlacklistedKeysIdGetWithHttpInfo($project_id, $id)
    {
        $returnType = '\Swagger\Client\Model\BlacklistedKey';
        $request = $this->projectsProjectIdBlacklistedKeysIdGetRequest($project_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\BlacklistedKey', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdBlacklistedKeysIdGetAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdBlacklistedKeysIdGetAsync($project_id, $id)
    {
        return $this->projectsProjectIdBlacklistedKeysIdGetAsyncWithHttpInfo($project_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdBlacklistedKeysIdGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdBlacklistedKeysIdGetAsyncWithHttpInfo($project_id, $id)
    {
        $returnType = '\Swagger\Client\Model\BlacklistedKey';
        $request = $this->projectsProjectIdBlacklistedKeysIdGetRequest($project_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdBlacklistedKeysIdGet'
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdBlacklistedKeysIdGetRequest($project_id, $id)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdBlacklistedKeysIdGet');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdBlacklistedKeysIdGet');
        }

        $resourcePath = '/projects/{ProjectId}/blacklisted_keys/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdBlacklistedKeysIdPatch
     *
     * @param string $name  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BlacklistedKey
     */
    public function projectsProjectIdBlacklistedKeysIdPatch($name, $project_id, $id)
    {
        list($response) = $this->projectsProjectIdBlacklistedKeysIdPatchWithHttpInfo($name, $project_id, $id);
        return $response;
    }

    /**
     * Operation projectsProjectIdBlacklistedKeysIdPatchWithHttpInfo
     *
     * @param string $name  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BlacklistedKey, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdBlacklistedKeysIdPatchWithHttpInfo($name, $project_id, $id)
    {
        $returnType = '\Swagger\Client\Model\BlacklistedKey';
        $request = $this->projectsProjectIdBlacklistedKeysIdPatchRequest($name, $project_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\BlacklistedKey', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdBlacklistedKeysIdPatchAsync
     *
     * 
     *
     * @param string $name  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdBlacklistedKeysIdPatchAsync($name, $project_id, $id)
    {
        return $this->projectsProjectIdBlacklistedKeysIdPatchAsyncWithHttpInfo($name, $project_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdBlacklistedKeysIdPatchAsyncWithHttpInfo
     *
     * 
     *
     * @param string $name  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdBlacklistedKeysIdPatchAsyncWithHttpInfo($name, $project_id, $id)
    {
        $returnType = '\Swagger\Client\Model\BlacklistedKey';
        $request = $this->projectsProjectIdBlacklistedKeysIdPatchRequest($name, $project_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdBlacklistedKeysIdPatch'
     *
     * @param string $name  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdBlacklistedKeysIdPatchRequest($name, $project_id, $id)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling projectsProjectIdBlacklistedKeysIdPatch');
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdBlacklistedKeysIdPatch');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdBlacklistedKeysIdPatch');
        }

        $resourcePath = '/projects/{ProjectId}/blacklisted_keys/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdBlacklistedKeysPost
     *
     * @param string $name  (required)
     * @param string $project_id ProjectId (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BlacklistedKey
     */
    public function projectsProjectIdBlacklistedKeysPost($name, $project_id)
    {
        list($response) = $this->projectsProjectIdBlacklistedKeysPostWithHttpInfo($name, $project_id);
        return $response;
    }

    /**
     * Operation projectsProjectIdBlacklistedKeysPostWithHttpInfo
     *
     * @param string $name  (required)
     * @param string $project_id ProjectId (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BlacklistedKey, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdBlacklistedKeysPostWithHttpInfo($name, $project_id)
    {
        $returnType = '\Swagger\Client\Model\BlacklistedKey';
        $request = $this->projectsProjectIdBlacklistedKeysPostRequest($name, $project_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\BlacklistedKey', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdBlacklistedKeysPostAsync
     *
     * 
     *
     * @param string $name  (required)
     * @param string $project_id ProjectId (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdBlacklistedKeysPostAsync($name, $project_id)
    {
        return $this->projectsProjectIdBlacklistedKeysPostAsyncWithHttpInfo($name, $project_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdBlacklistedKeysPostAsyncWithHttpInfo
     *
     * 
     *
     * @param string $name  (required)
     * @param string $project_id ProjectId (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdBlacklistedKeysPostAsyncWithHttpInfo($name, $project_id)
    {
        $returnType = '\Swagger\Client\Model\BlacklistedKey';
        $request = $this->projectsProjectIdBlacklistedKeysPostRequest($name, $project_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdBlacklistedKeysPost'
     *
     * @param string $name  (required)
     * @param string $project_id ProjectId (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdBlacklistedKeysPostRequest($name, $project_id)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling projectsProjectIdBlacklistedKeysPost');
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdBlacklistedKeysPost');
        }

        $resourcePath = '/projects/{ProjectId}/blacklisted_keys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdKeysDelete
     *
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $locale_id  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AffectedResources
     */
    public function projectsProjectIdKeysDelete($project_id, $q = null, $locale_id = null)
    {
        list($response) = $this->projectsProjectIdKeysDeleteWithHttpInfo($project_id, $q, $locale_id);
        return $response;
    }

    /**
     * Operation projectsProjectIdKeysDeleteWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $locale_id  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AffectedResources, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdKeysDeleteWithHttpInfo($project_id, $q = null, $locale_id = null)
    {
        $returnType = '\Swagger\Client\Model\AffectedResources';
        $request = $this->projectsProjectIdKeysDeleteRequest($project_id, $q, $locale_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\AffectedResources', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdKeysDeleteAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $locale_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysDeleteAsync($project_id, $q = null, $locale_id = null)
    {
        return $this->projectsProjectIdKeysDeleteAsyncWithHttpInfo($project_id, $q, $locale_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdKeysDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $locale_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysDeleteAsyncWithHttpInfo($project_id, $q = null, $locale_id = null)
    {
        $returnType = '\Swagger\Client\Model\AffectedResources';
        $request = $this->projectsProjectIdKeysDeleteRequest($project_id, $q, $locale_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdKeysDelete'
     *
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $locale_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdKeysDeleteRequest($project_id, $q = null, $locale_id = null)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdKeysDelete');
        }

        $resourcePath = '/projects/{ProjectId}/keys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q);
        }
        // query params
        if ($locale_id !== null) {
            $queryParams['locale_id'] = ObjectSerializer::toQueryValue($locale_id);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdKeysGet
     *
     * @param string $project_id ProjectId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param string $locale_id  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TranslationKey[]
     */
    public function projectsProjectIdKeysGet($project_id, $sort = null, $order = null, $q = null, $locale_id = null, $per_page = '25', $page = '1')
    {
        list($response) = $this->projectsProjectIdKeysGetWithHttpInfo($project_id, $sort, $order, $q, $locale_id, $per_page, $page);
        return $response;
    }

    /**
     * Operation projectsProjectIdKeysGetWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param string $locale_id  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TranslationKey[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdKeysGetWithHttpInfo($project_id, $sort = null, $order = null, $q = null, $locale_id = null, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\TranslationKey[]';
        $request = $this->projectsProjectIdKeysGetRequest($project_id, $sort, $order, $q, $locale_id, $per_page, $page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\TranslationKey[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdKeysGetAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param string $locale_id  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysGetAsync($project_id, $sort = null, $order = null, $q = null, $locale_id = null, $per_page = '25', $page = '1')
    {
        return $this->projectsProjectIdKeysGetAsyncWithHttpInfo($project_id, $sort, $order, $q, $locale_id, $per_page, $page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdKeysGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param string $locale_id  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysGetAsyncWithHttpInfo($project_id, $sort = null, $order = null, $q = null, $locale_id = null, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\TranslationKey[]';
        $request = $this->projectsProjectIdKeysGetRequest($project_id, $sort, $order, $q, $locale_id, $per_page, $page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdKeysGet'
     *
     * @param string $project_id ProjectId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param string $locale_id  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdKeysGetRequest($project_id, $sort = null, $order = null, $q = null, $locale_id = null, $per_page = '25', $page = '1')
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdKeysGet');
        }

        $resourcePath = '/projects/{ProjectId}/keys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q);
        }
        // query params
        if ($locale_id !== null) {
            $queryParams['locale_id'] = ObjectSerializer::toQueryValue($locale_id);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdKeysIdDelete
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function projectsProjectIdKeysIdDelete($project_id, $id)
    {
        $this->projectsProjectIdKeysIdDeleteWithHttpInfo($project_id, $id);
    }

    /**
     * Operation projectsProjectIdKeysIdDeleteWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdKeysIdDeleteWithHttpInfo($project_id, $id)
    {
        $returnType = '';
        $request = $this->projectsProjectIdKeysIdDeleteRequest($project_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdKeysIdDeleteAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysIdDeleteAsync($project_id, $id)
    {
        return $this->projectsProjectIdKeysIdDeleteAsyncWithHttpInfo($project_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdKeysIdDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysIdDeleteAsyncWithHttpInfo($project_id, $id)
    {
        $returnType = '';
        $request = $this->projectsProjectIdKeysIdDeleteRequest($project_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdKeysIdDelete'
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdKeysIdDeleteRequest($project_id, $id)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdKeysIdDelete');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdKeysIdDelete');
        }

        $resourcePath = '/projects/{ProjectId}/keys/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdKeysIdGet
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TranslationKey
     */
    public function projectsProjectIdKeysIdGet($project_id, $id)
    {
        list($response) = $this->projectsProjectIdKeysIdGetWithHttpInfo($project_id, $id);
        return $response;
    }

    /**
     * Operation projectsProjectIdKeysIdGetWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TranslationKey, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdKeysIdGetWithHttpInfo($project_id, $id)
    {
        $returnType = '\Swagger\Client\Model\TranslationKey';
        $request = $this->projectsProjectIdKeysIdGetRequest($project_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\TranslationKey', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdKeysIdGetAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysIdGetAsync($project_id, $id)
    {
        return $this->projectsProjectIdKeysIdGetAsyncWithHttpInfo($project_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdKeysIdGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysIdGetAsyncWithHttpInfo($project_id, $id)
    {
        $returnType = '\Swagger\Client\Model\TranslationKey';
        $request = $this->projectsProjectIdKeysIdGetRequest($project_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdKeysIdGet'
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdKeysIdGetRequest($project_id, $id)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdKeysIdGet');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdKeysIdGet');
        }

        $resourcePath = '/projects/{ProjectId}/keys/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdKeysIdPatch
     *
     * @param string $name  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param string $description  (optional)
     * @param bool $plural  (optional)
     * @param string $name_plural  (optional)
     * @param string $data_type  (optional)
     * @param string $tags  (optional)
     * @param int $max_characters_allowed  (optional)
     * @param string $screenshot  (optional)
     * @param bool $remove_screenshot  (optional)
     * @param bool $unformatted  (optional)
     * @param bool $xml_space_preserve  (optional)
     * @param string $original_file  (optional)
     * @param string $localized_format_string  (optional)
     * @param string $localized_format_key  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TranslationKeyDetails
     */
    public function projectsProjectIdKeysIdPatch($name, $project_id, $id, $description = null, $plural = null, $name_plural = null, $data_type = null, $tags = null, $max_characters_allowed = null, $screenshot = null, $remove_screenshot = null, $unformatted = null, $xml_space_preserve = null, $original_file = null, $localized_format_string = null, $localized_format_key = null)
    {
        list($response) = $this->projectsProjectIdKeysIdPatchWithHttpInfo($name, $project_id, $id, $description, $plural, $name_plural, $data_type, $tags, $max_characters_allowed, $screenshot, $remove_screenshot, $unformatted, $xml_space_preserve, $original_file, $localized_format_string, $localized_format_key);
        return $response;
    }

    /**
     * Operation projectsProjectIdKeysIdPatchWithHttpInfo
     *
     * @param string $name  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param string $description  (optional)
     * @param bool $plural  (optional)
     * @param string $name_plural  (optional)
     * @param string $data_type  (optional)
     * @param string $tags  (optional)
     * @param int $max_characters_allowed  (optional)
     * @param string $screenshot  (optional)
     * @param bool $remove_screenshot  (optional)
     * @param bool $unformatted  (optional)
     * @param bool $xml_space_preserve  (optional)
     * @param string $original_file  (optional)
     * @param string $localized_format_string  (optional)
     * @param string $localized_format_key  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TranslationKeyDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdKeysIdPatchWithHttpInfo($name, $project_id, $id, $description = null, $plural = null, $name_plural = null, $data_type = null, $tags = null, $max_characters_allowed = null, $screenshot = null, $remove_screenshot = null, $unformatted = null, $xml_space_preserve = null, $original_file = null, $localized_format_string = null, $localized_format_key = null)
    {
        $returnType = '\Swagger\Client\Model\TranslationKeyDetails';
        $request = $this->projectsProjectIdKeysIdPatchRequest($name, $project_id, $id, $description, $plural, $name_plural, $data_type, $tags, $max_characters_allowed, $screenshot, $remove_screenshot, $unformatted, $xml_space_preserve, $original_file, $localized_format_string, $localized_format_key);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\TranslationKeyDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdKeysIdPatchAsync
     *
     * 
     *
     * @param string $name  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param string $description  (optional)
     * @param bool $plural  (optional)
     * @param string $name_plural  (optional)
     * @param string $data_type  (optional)
     * @param string $tags  (optional)
     * @param int $max_characters_allowed  (optional)
     * @param string $screenshot  (optional)
     * @param bool $remove_screenshot  (optional)
     * @param bool $unformatted  (optional)
     * @param bool $xml_space_preserve  (optional)
     * @param string $original_file  (optional)
     * @param string $localized_format_string  (optional)
     * @param string $localized_format_key  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysIdPatchAsync($name, $project_id, $id, $description = null, $plural = null, $name_plural = null, $data_type = null, $tags = null, $max_characters_allowed = null, $screenshot = null, $remove_screenshot = null, $unformatted = null, $xml_space_preserve = null, $original_file = null, $localized_format_string = null, $localized_format_key = null)
    {
        return $this->projectsProjectIdKeysIdPatchAsyncWithHttpInfo($name, $project_id, $id, $description, $plural, $name_plural, $data_type, $tags, $max_characters_allowed, $screenshot, $remove_screenshot, $unformatted, $xml_space_preserve, $original_file, $localized_format_string, $localized_format_key)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdKeysIdPatchAsyncWithHttpInfo
     *
     * 
     *
     * @param string $name  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param string $description  (optional)
     * @param bool $plural  (optional)
     * @param string $name_plural  (optional)
     * @param string $data_type  (optional)
     * @param string $tags  (optional)
     * @param int $max_characters_allowed  (optional)
     * @param string $screenshot  (optional)
     * @param bool $remove_screenshot  (optional)
     * @param bool $unformatted  (optional)
     * @param bool $xml_space_preserve  (optional)
     * @param string $original_file  (optional)
     * @param string $localized_format_string  (optional)
     * @param string $localized_format_key  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysIdPatchAsyncWithHttpInfo($name, $project_id, $id, $description = null, $plural = null, $name_plural = null, $data_type = null, $tags = null, $max_characters_allowed = null, $screenshot = null, $remove_screenshot = null, $unformatted = null, $xml_space_preserve = null, $original_file = null, $localized_format_string = null, $localized_format_key = null)
    {
        $returnType = '\Swagger\Client\Model\TranslationKeyDetails';
        $request = $this->projectsProjectIdKeysIdPatchRequest($name, $project_id, $id, $description, $plural, $name_plural, $data_type, $tags, $max_characters_allowed, $screenshot, $remove_screenshot, $unformatted, $xml_space_preserve, $original_file, $localized_format_string, $localized_format_key);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdKeysIdPatch'
     *
     * @param string $name  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param string $description  (optional)
     * @param bool $plural  (optional)
     * @param string $name_plural  (optional)
     * @param string $data_type  (optional)
     * @param string $tags  (optional)
     * @param int $max_characters_allowed  (optional)
     * @param string $screenshot  (optional)
     * @param bool $remove_screenshot  (optional)
     * @param bool $unformatted  (optional)
     * @param bool $xml_space_preserve  (optional)
     * @param string $original_file  (optional)
     * @param string $localized_format_string  (optional)
     * @param string $localized_format_key  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdKeysIdPatchRequest($name, $project_id, $id, $description = null, $plural = null, $name_plural = null, $data_type = null, $tags = null, $max_characters_allowed = null, $screenshot = null, $remove_screenshot = null, $unformatted = null, $xml_space_preserve = null, $original_file = null, $localized_format_string = null, $localized_format_key = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling projectsProjectIdKeysIdPatch');
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdKeysIdPatch');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdKeysIdPatch');
        }

        $resourcePath = '/projects/{ProjectId}/keys/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($description !== null) {
            $queryParams['description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($plural !== null) {
            $queryParams['plural'] = ObjectSerializer::toQueryValue($plural);
        }
        // query params
        if ($name_plural !== null) {
            $queryParams['name_plural'] = ObjectSerializer::toQueryValue($name_plural);
        }
        // query params
        if ($data_type !== null) {
            $queryParams['data_type'] = ObjectSerializer::toQueryValue($data_type);
        }
        // query params
        if ($tags !== null) {
            $queryParams['tags'] = ObjectSerializer::toQueryValue($tags);
        }
        // query params
        if ($max_characters_allowed !== null) {
            $queryParams['max_characters_allowed'] = ObjectSerializer::toQueryValue($max_characters_allowed);
        }
        // query params
        if ($screenshot !== null) {
            $queryParams['screenshot'] = ObjectSerializer::toQueryValue($screenshot);
        }
        // query params
        if ($remove_screenshot !== null) {
            $queryParams['remove_screenshot'] = ObjectSerializer::toQueryValue($remove_screenshot);
        }
        // query params
        if ($unformatted !== null) {
            $queryParams['unformatted'] = ObjectSerializer::toQueryValue($unformatted);
        }
        // query params
        if ($xml_space_preserve !== null) {
            $queryParams['xml_space_preserve'] = ObjectSerializer::toQueryValue($xml_space_preserve);
        }
        // query params
        if ($original_file !== null) {
            $queryParams['original_file'] = ObjectSerializer::toQueryValue($original_file);
        }
        // query params
        if ($localized_format_string !== null) {
            $queryParams['localized_format_string'] = ObjectSerializer::toQueryValue($localized_format_string);
        }
        // query params
        if ($localized_format_key !== null) {
            $queryParams['localized_format_key'] = ObjectSerializer::toQueryValue($localized_format_key);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsGet
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Comment[]
     */
    public function projectsProjectIdKeysKeyIdCommentsGet($project_id, $key_id, $per_page = '25', $page = '1')
    {
        list($response) = $this->projectsProjectIdKeysKeyIdCommentsGetWithHttpInfo($project_id, $key_id, $per_page, $page);
        return $response;
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsGetWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Comment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdKeysKeyIdCommentsGetWithHttpInfo($project_id, $key_id, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Comment[]';
        $request = $this->projectsProjectIdKeysKeyIdCommentsGetRequest($project_id, $key_id, $per_page, $page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Comment[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsGetAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysKeyIdCommentsGetAsync($project_id, $key_id, $per_page = '25', $page = '1')
    {
        return $this->projectsProjectIdKeysKeyIdCommentsGetAsyncWithHttpInfo($project_id, $key_id, $per_page, $page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysKeyIdCommentsGetAsyncWithHttpInfo($project_id, $key_id, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Comment[]';
        $request = $this->projectsProjectIdKeysKeyIdCommentsGetRequest($project_id, $key_id, $per_page, $page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdKeysKeyIdCommentsGet'
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdKeysKeyIdCommentsGetRequest($project_id, $key_id, $per_page = '25', $page = '1')
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdKeysKeyIdCommentsGet');
        }
        // verify the required parameter 'key_id' is set
        if ($key_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $key_id when calling projectsProjectIdKeysKeyIdCommentsGet');
        }

        $resourcePath = '/projects/{ProjectId}/keys/{KeyId}/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($key_id !== null) {
            $resourcePath = str_replace('{' . 'KeyId' . '}', ObjectSerializer::toPathValue($key_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsIdDelete
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function projectsProjectIdKeysKeyIdCommentsIdDelete($project_id, $key_id, $id)
    {
        $this->projectsProjectIdKeysKeyIdCommentsIdDeleteWithHttpInfo($project_id, $key_id, $id);
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsIdDeleteWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdKeysKeyIdCommentsIdDeleteWithHttpInfo($project_id, $key_id, $id)
    {
        $returnType = '';
        $request = $this->projectsProjectIdKeysKeyIdCommentsIdDeleteRequest($project_id, $key_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsIdDeleteAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysKeyIdCommentsIdDeleteAsync($project_id, $key_id, $id)
    {
        return $this->projectsProjectIdKeysKeyIdCommentsIdDeleteAsyncWithHttpInfo($project_id, $key_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsIdDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysKeyIdCommentsIdDeleteAsyncWithHttpInfo($project_id, $key_id, $id)
    {
        $returnType = '';
        $request = $this->projectsProjectIdKeysKeyIdCommentsIdDeleteRequest($project_id, $key_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdKeysKeyIdCommentsIdDelete'
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdKeysKeyIdCommentsIdDeleteRequest($project_id, $key_id, $id)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdKeysKeyIdCommentsIdDelete');
        }
        // verify the required parameter 'key_id' is set
        if ($key_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $key_id when calling projectsProjectIdKeysKeyIdCommentsIdDelete');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdKeysKeyIdCommentsIdDelete');
        }

        $resourcePath = '/projects/{ProjectId}/keys/{KeyId}/comments/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($key_id !== null) {
            $resourcePath = str_replace('{' . 'KeyId' . '}', ObjectSerializer::toPathValue($key_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsIdGet
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Comment
     */
    public function projectsProjectIdKeysKeyIdCommentsIdGet($project_id, $key_id, $id)
    {
        list($response) = $this->projectsProjectIdKeysKeyIdCommentsIdGetWithHttpInfo($project_id, $key_id, $id);
        return $response;
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsIdGetWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Comment, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdKeysKeyIdCommentsIdGetWithHttpInfo($project_id, $key_id, $id)
    {
        $returnType = '\Swagger\Client\Model\Comment';
        $request = $this->projectsProjectIdKeysKeyIdCommentsIdGetRequest($project_id, $key_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Comment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsIdGetAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysKeyIdCommentsIdGetAsync($project_id, $key_id, $id)
    {
        return $this->projectsProjectIdKeysKeyIdCommentsIdGetAsyncWithHttpInfo($project_id, $key_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsIdGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysKeyIdCommentsIdGetAsyncWithHttpInfo($project_id, $key_id, $id)
    {
        $returnType = '\Swagger\Client\Model\Comment';
        $request = $this->projectsProjectIdKeysKeyIdCommentsIdGetRequest($project_id, $key_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdKeysKeyIdCommentsIdGet'
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdKeysKeyIdCommentsIdGetRequest($project_id, $key_id, $id)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdKeysKeyIdCommentsIdGet');
        }
        // verify the required parameter 'key_id' is set
        if ($key_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $key_id when calling projectsProjectIdKeysKeyIdCommentsIdGet');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdKeysKeyIdCommentsIdGet');
        }

        $resourcePath = '/projects/{ProjectId}/keys/{KeyId}/comments/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($key_id !== null) {
            $resourcePath = str_replace('{' . 'KeyId' . '}', ObjectSerializer::toPathValue($key_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsIdPatch
     *
     * @param string $message  (required)
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Comment
     */
    public function projectsProjectIdKeysKeyIdCommentsIdPatch($message, $project_id, $key_id, $id)
    {
        list($response) = $this->projectsProjectIdKeysKeyIdCommentsIdPatchWithHttpInfo($message, $project_id, $key_id, $id);
        return $response;
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsIdPatchWithHttpInfo
     *
     * @param string $message  (required)
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Comment, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdKeysKeyIdCommentsIdPatchWithHttpInfo($message, $project_id, $key_id, $id)
    {
        $returnType = '\Swagger\Client\Model\Comment';
        $request = $this->projectsProjectIdKeysKeyIdCommentsIdPatchRequest($message, $project_id, $key_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Comment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsIdPatchAsync
     *
     * 
     *
     * @param string $message  (required)
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysKeyIdCommentsIdPatchAsync($message, $project_id, $key_id, $id)
    {
        return $this->projectsProjectIdKeysKeyIdCommentsIdPatchAsyncWithHttpInfo($message, $project_id, $key_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsIdPatchAsyncWithHttpInfo
     *
     * 
     *
     * @param string $message  (required)
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysKeyIdCommentsIdPatchAsyncWithHttpInfo($message, $project_id, $key_id, $id)
    {
        $returnType = '\Swagger\Client\Model\Comment';
        $request = $this->projectsProjectIdKeysKeyIdCommentsIdPatchRequest($message, $project_id, $key_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdKeysKeyIdCommentsIdPatch'
     *
     * @param string $message  (required)
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdKeysKeyIdCommentsIdPatchRequest($message, $project_id, $key_id, $id)
    {
        // verify the required parameter 'message' is set
        if ($message === null) {
            throw new \InvalidArgumentException('Missing the required parameter $message when calling projectsProjectIdKeysKeyIdCommentsIdPatch');
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdKeysKeyIdCommentsIdPatch');
        }
        // verify the required parameter 'key_id' is set
        if ($key_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $key_id when calling projectsProjectIdKeysKeyIdCommentsIdPatch');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdKeysKeyIdCommentsIdPatch');
        }

        $resourcePath = '/projects/{ProjectId}/keys/{KeyId}/comments/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($message !== null) {
            $queryParams['message'] = ObjectSerializer::toQueryValue($message);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($key_id !== null) {
            $resourcePath = str_replace('{' . 'KeyId' . '}', ObjectSerializer::toPathValue($key_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsIdReadDelete
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function projectsProjectIdKeysKeyIdCommentsIdReadDelete($project_id, $key_id, $id)
    {
        $this->projectsProjectIdKeysKeyIdCommentsIdReadDeleteWithHttpInfo($project_id, $key_id, $id);
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsIdReadDeleteWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdKeysKeyIdCommentsIdReadDeleteWithHttpInfo($project_id, $key_id, $id)
    {
        $returnType = '';
        $request = $this->projectsProjectIdKeysKeyIdCommentsIdReadDeleteRequest($project_id, $key_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsIdReadDeleteAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysKeyIdCommentsIdReadDeleteAsync($project_id, $key_id, $id)
    {
        return $this->projectsProjectIdKeysKeyIdCommentsIdReadDeleteAsyncWithHttpInfo($project_id, $key_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsIdReadDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysKeyIdCommentsIdReadDeleteAsyncWithHttpInfo($project_id, $key_id, $id)
    {
        $returnType = '';
        $request = $this->projectsProjectIdKeysKeyIdCommentsIdReadDeleteRequest($project_id, $key_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdKeysKeyIdCommentsIdReadDelete'
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdKeysKeyIdCommentsIdReadDeleteRequest($project_id, $key_id, $id)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdKeysKeyIdCommentsIdReadDelete');
        }
        // verify the required parameter 'key_id' is set
        if ($key_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $key_id when calling projectsProjectIdKeysKeyIdCommentsIdReadDelete');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdKeysKeyIdCommentsIdReadDelete');
        }

        $resourcePath = '/projects/{ProjectId}/keys/{KeyId}/comments/{Id}/read';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($key_id !== null) {
            $resourcePath = str_replace('{' . 'KeyId' . '}', ObjectSerializer::toPathValue($key_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsIdReadGet
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function projectsProjectIdKeysKeyIdCommentsIdReadGet($project_id, $key_id, $id)
    {
        $this->projectsProjectIdKeysKeyIdCommentsIdReadGetWithHttpInfo($project_id, $key_id, $id);
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsIdReadGetWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdKeysKeyIdCommentsIdReadGetWithHttpInfo($project_id, $key_id, $id)
    {
        $returnType = '';
        $request = $this->projectsProjectIdKeysKeyIdCommentsIdReadGetRequest($project_id, $key_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsIdReadGetAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysKeyIdCommentsIdReadGetAsync($project_id, $key_id, $id)
    {
        return $this->projectsProjectIdKeysKeyIdCommentsIdReadGetAsyncWithHttpInfo($project_id, $key_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsIdReadGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysKeyIdCommentsIdReadGetAsyncWithHttpInfo($project_id, $key_id, $id)
    {
        $returnType = '';
        $request = $this->projectsProjectIdKeysKeyIdCommentsIdReadGetRequest($project_id, $key_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdKeysKeyIdCommentsIdReadGet'
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdKeysKeyIdCommentsIdReadGetRequest($project_id, $key_id, $id)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdKeysKeyIdCommentsIdReadGet');
        }
        // verify the required parameter 'key_id' is set
        if ($key_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $key_id when calling projectsProjectIdKeysKeyIdCommentsIdReadGet');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdKeysKeyIdCommentsIdReadGet');
        }

        $resourcePath = '/projects/{ProjectId}/keys/{KeyId}/comments/{Id}/read';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($key_id !== null) {
            $resourcePath = str_replace('{' . 'KeyId' . '}', ObjectSerializer::toPathValue($key_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsIdReadPatch
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function projectsProjectIdKeysKeyIdCommentsIdReadPatch($project_id, $key_id, $id)
    {
        $this->projectsProjectIdKeysKeyIdCommentsIdReadPatchWithHttpInfo($project_id, $key_id, $id);
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsIdReadPatchWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdKeysKeyIdCommentsIdReadPatchWithHttpInfo($project_id, $key_id, $id)
    {
        $returnType = '';
        $request = $this->projectsProjectIdKeysKeyIdCommentsIdReadPatchRequest($project_id, $key_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsIdReadPatchAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysKeyIdCommentsIdReadPatchAsync($project_id, $key_id, $id)
    {
        return $this->projectsProjectIdKeysKeyIdCommentsIdReadPatchAsyncWithHttpInfo($project_id, $key_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsIdReadPatchAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysKeyIdCommentsIdReadPatchAsyncWithHttpInfo($project_id, $key_id, $id)
    {
        $returnType = '';
        $request = $this->projectsProjectIdKeysKeyIdCommentsIdReadPatchRequest($project_id, $key_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdKeysKeyIdCommentsIdReadPatch'
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdKeysKeyIdCommentsIdReadPatchRequest($project_id, $key_id, $id)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdKeysKeyIdCommentsIdReadPatch');
        }
        // verify the required parameter 'key_id' is set
        if ($key_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $key_id when calling projectsProjectIdKeysKeyIdCommentsIdReadPatch');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdKeysKeyIdCommentsIdReadPatch');
        }

        $resourcePath = '/projects/{ProjectId}/keys/{KeyId}/comments/{Id}/read';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($key_id !== null) {
            $resourcePath = str_replace('{' . 'KeyId' . '}', ObjectSerializer::toPathValue($key_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsPost
     *
     * @param string $message  (required)
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Comment
     */
    public function projectsProjectIdKeysKeyIdCommentsPost($message, $project_id, $key_id)
    {
        list($response) = $this->projectsProjectIdKeysKeyIdCommentsPostWithHttpInfo($message, $project_id, $key_id);
        return $response;
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsPostWithHttpInfo
     *
     * @param string $message  (required)
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Comment, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdKeysKeyIdCommentsPostWithHttpInfo($message, $project_id, $key_id)
    {
        $returnType = '\Swagger\Client\Model\Comment';
        $request = $this->projectsProjectIdKeysKeyIdCommentsPostRequest($message, $project_id, $key_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Comment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsPostAsync
     *
     * 
     *
     * @param string $message  (required)
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysKeyIdCommentsPostAsync($message, $project_id, $key_id)
    {
        return $this->projectsProjectIdKeysKeyIdCommentsPostAsyncWithHttpInfo($message, $project_id, $key_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdKeysKeyIdCommentsPostAsyncWithHttpInfo
     *
     * 
     *
     * @param string $message  (required)
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysKeyIdCommentsPostAsyncWithHttpInfo($message, $project_id, $key_id)
    {
        $returnType = '\Swagger\Client\Model\Comment';
        $request = $this->projectsProjectIdKeysKeyIdCommentsPostRequest($message, $project_id, $key_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdKeysKeyIdCommentsPost'
     *
     * @param string $message  (required)
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdKeysKeyIdCommentsPostRequest($message, $project_id, $key_id)
    {
        // verify the required parameter 'message' is set
        if ($message === null) {
            throw new \InvalidArgumentException('Missing the required parameter $message when calling projectsProjectIdKeysKeyIdCommentsPost');
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdKeysKeyIdCommentsPost');
        }
        // verify the required parameter 'key_id' is set
        if ($key_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $key_id when calling projectsProjectIdKeysKeyIdCommentsPost');
        }

        $resourcePath = '/projects/{ProjectId}/keys/{KeyId}/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($message !== null) {
            $queryParams['message'] = ObjectSerializer::toQueryValue($message);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($key_id !== null) {
            $resourcePath = str_replace('{' . 'KeyId' . '}', ObjectSerializer::toPathValue($key_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdKeysKeyIdTranslationsGet
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Translation
     */
    public function projectsProjectIdKeysKeyIdTranslationsGet($project_id, $key_id, $sort = null, $order = null, $q = null, $per_page = '25', $page = '1')
    {
        list($response) = $this->projectsProjectIdKeysKeyIdTranslationsGetWithHttpInfo($project_id, $key_id, $sort, $order, $q, $per_page, $page);
        return $response;
    }

    /**
     * Operation projectsProjectIdKeysKeyIdTranslationsGetWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Translation, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdKeysKeyIdTranslationsGetWithHttpInfo($project_id, $key_id, $sort = null, $order = null, $q = null, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Translation';
        $request = $this->projectsProjectIdKeysKeyIdTranslationsGetRequest($project_id, $key_id, $sort, $order, $q, $per_page, $page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Translation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdKeysKeyIdTranslationsGetAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysKeyIdTranslationsGetAsync($project_id, $key_id, $sort = null, $order = null, $q = null, $per_page = '25', $page = '1')
    {
        return $this->projectsProjectIdKeysKeyIdTranslationsGetAsyncWithHttpInfo($project_id, $key_id, $sort, $order, $q, $per_page, $page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdKeysKeyIdTranslationsGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysKeyIdTranslationsGetAsyncWithHttpInfo($project_id, $key_id, $sort = null, $order = null, $q = null, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Translation';
        $request = $this->projectsProjectIdKeysKeyIdTranslationsGetRequest($project_id, $key_id, $sort, $order, $q, $per_page, $page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdKeysKeyIdTranslationsGet'
     *
     * @param string $project_id ProjectId (required)
     * @param string $key_id KeyId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdKeysKeyIdTranslationsGetRequest($project_id, $key_id, $sort = null, $order = null, $q = null, $per_page = '25', $page = '1')
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdKeysKeyIdTranslationsGet');
        }
        // verify the required parameter 'key_id' is set
        if ($key_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $key_id when calling projectsProjectIdKeysKeyIdTranslationsGet');
        }

        $resourcePath = '/projects/{ProjectId}/keys/{KeyId}/translations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($key_id !== null) {
            $resourcePath = str_replace('{' . 'KeyId' . '}', ObjectSerializer::toPathValue($key_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdKeysPost
     *
     * @param string $name  (required)
     * @param string $project_id ProjectId (required)
     * @param string $description  (optional)
     * @param bool $plural  (optional)
     * @param string $name_plural  (optional)
     * @param string $data_type  (optional)
     * @param string $tags  (optional)
     * @param int $max_characters_allowed  (optional)
     * @param string $screenshot  (optional)
     * @param bool $remove_screenshot  (optional)
     * @param bool $unformatted  (optional)
     * @param bool $xml_space_preserve  (optional)
     * @param string $original_file  (optional)
     * @param string $localized_format_string  (optional)
     * @param string $localized_format_key  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TranslationKeyDetails
     */
    public function projectsProjectIdKeysPost($name, $project_id, $description = null, $plural = null, $name_plural = null, $data_type = null, $tags = null, $max_characters_allowed = null, $screenshot = null, $remove_screenshot = null, $unformatted = null, $xml_space_preserve = null, $original_file = null, $localized_format_string = null, $localized_format_key = null)
    {
        list($response) = $this->projectsProjectIdKeysPostWithHttpInfo($name, $project_id, $description, $plural, $name_plural, $data_type, $tags, $max_characters_allowed, $screenshot, $remove_screenshot, $unformatted, $xml_space_preserve, $original_file, $localized_format_string, $localized_format_key);
        return $response;
    }

    /**
     * Operation projectsProjectIdKeysPostWithHttpInfo
     *
     * @param string $name  (required)
     * @param string $project_id ProjectId (required)
     * @param string $description  (optional)
     * @param bool $plural  (optional)
     * @param string $name_plural  (optional)
     * @param string $data_type  (optional)
     * @param string $tags  (optional)
     * @param int $max_characters_allowed  (optional)
     * @param string $screenshot  (optional)
     * @param bool $remove_screenshot  (optional)
     * @param bool $unformatted  (optional)
     * @param bool $xml_space_preserve  (optional)
     * @param string $original_file  (optional)
     * @param string $localized_format_string  (optional)
     * @param string $localized_format_key  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TranslationKeyDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdKeysPostWithHttpInfo($name, $project_id, $description = null, $plural = null, $name_plural = null, $data_type = null, $tags = null, $max_characters_allowed = null, $screenshot = null, $remove_screenshot = null, $unformatted = null, $xml_space_preserve = null, $original_file = null, $localized_format_string = null, $localized_format_key = null)
    {
        $returnType = '\Swagger\Client\Model\TranslationKeyDetails';
        $request = $this->projectsProjectIdKeysPostRequest($name, $project_id, $description, $plural, $name_plural, $data_type, $tags, $max_characters_allowed, $screenshot, $remove_screenshot, $unformatted, $xml_space_preserve, $original_file, $localized_format_string, $localized_format_key);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\TranslationKeyDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdKeysPostAsync
     *
     * 
     *
     * @param string $name  (required)
     * @param string $project_id ProjectId (required)
     * @param string $description  (optional)
     * @param bool $plural  (optional)
     * @param string $name_plural  (optional)
     * @param string $data_type  (optional)
     * @param string $tags  (optional)
     * @param int $max_characters_allowed  (optional)
     * @param string $screenshot  (optional)
     * @param bool $remove_screenshot  (optional)
     * @param bool $unformatted  (optional)
     * @param bool $xml_space_preserve  (optional)
     * @param string $original_file  (optional)
     * @param string $localized_format_string  (optional)
     * @param string $localized_format_key  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysPostAsync($name, $project_id, $description = null, $plural = null, $name_plural = null, $data_type = null, $tags = null, $max_characters_allowed = null, $screenshot = null, $remove_screenshot = null, $unformatted = null, $xml_space_preserve = null, $original_file = null, $localized_format_string = null, $localized_format_key = null)
    {
        return $this->projectsProjectIdKeysPostAsyncWithHttpInfo($name, $project_id, $description, $plural, $name_plural, $data_type, $tags, $max_characters_allowed, $screenshot, $remove_screenshot, $unformatted, $xml_space_preserve, $original_file, $localized_format_string, $localized_format_key)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdKeysPostAsyncWithHttpInfo
     *
     * 
     *
     * @param string $name  (required)
     * @param string $project_id ProjectId (required)
     * @param string $description  (optional)
     * @param bool $plural  (optional)
     * @param string $name_plural  (optional)
     * @param string $data_type  (optional)
     * @param string $tags  (optional)
     * @param int $max_characters_allowed  (optional)
     * @param string $screenshot  (optional)
     * @param bool $remove_screenshot  (optional)
     * @param bool $unformatted  (optional)
     * @param bool $xml_space_preserve  (optional)
     * @param string $original_file  (optional)
     * @param string $localized_format_string  (optional)
     * @param string $localized_format_key  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysPostAsyncWithHttpInfo($name, $project_id, $description = null, $plural = null, $name_plural = null, $data_type = null, $tags = null, $max_characters_allowed = null, $screenshot = null, $remove_screenshot = null, $unformatted = null, $xml_space_preserve = null, $original_file = null, $localized_format_string = null, $localized_format_key = null)
    {
        $returnType = '\Swagger\Client\Model\TranslationKeyDetails';
        $request = $this->projectsProjectIdKeysPostRequest($name, $project_id, $description, $plural, $name_plural, $data_type, $tags, $max_characters_allowed, $screenshot, $remove_screenshot, $unformatted, $xml_space_preserve, $original_file, $localized_format_string, $localized_format_key);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdKeysPost'
     *
     * @param string $name  (required)
     * @param string $project_id ProjectId (required)
     * @param string $description  (optional)
     * @param bool $plural  (optional)
     * @param string $name_plural  (optional)
     * @param string $data_type  (optional)
     * @param string $tags  (optional)
     * @param int $max_characters_allowed  (optional)
     * @param string $screenshot  (optional)
     * @param bool $remove_screenshot  (optional)
     * @param bool $unformatted  (optional)
     * @param bool $xml_space_preserve  (optional)
     * @param string $original_file  (optional)
     * @param string $localized_format_string  (optional)
     * @param string $localized_format_key  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdKeysPostRequest($name, $project_id, $description = null, $plural = null, $name_plural = null, $data_type = null, $tags = null, $max_characters_allowed = null, $screenshot = null, $remove_screenshot = null, $unformatted = null, $xml_space_preserve = null, $original_file = null, $localized_format_string = null, $localized_format_key = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling projectsProjectIdKeysPost');
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdKeysPost');
        }

        $resourcePath = '/projects/{ProjectId}/keys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($description !== null) {
            $queryParams['description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($plural !== null) {
            $queryParams['plural'] = ObjectSerializer::toQueryValue($plural);
        }
        // query params
        if ($name_plural !== null) {
            $queryParams['name_plural'] = ObjectSerializer::toQueryValue($name_plural);
        }
        // query params
        if ($data_type !== null) {
            $queryParams['data_type'] = ObjectSerializer::toQueryValue($data_type);
        }
        // query params
        if ($tags !== null) {
            $queryParams['tags'] = ObjectSerializer::toQueryValue($tags);
        }
        // query params
        if ($max_characters_allowed !== null) {
            $queryParams['max_characters_allowed'] = ObjectSerializer::toQueryValue($max_characters_allowed);
        }
        // query params
        if ($screenshot !== null) {
            $queryParams['screenshot'] = ObjectSerializer::toQueryValue($screenshot);
        }
        // query params
        if ($remove_screenshot !== null) {
            $queryParams['remove_screenshot'] = ObjectSerializer::toQueryValue($remove_screenshot);
        }
        // query params
        if ($unformatted !== null) {
            $queryParams['unformatted'] = ObjectSerializer::toQueryValue($unformatted);
        }
        // query params
        if ($xml_space_preserve !== null) {
            $queryParams['xml_space_preserve'] = ObjectSerializer::toQueryValue($xml_space_preserve);
        }
        // query params
        if ($original_file !== null) {
            $queryParams['original_file'] = ObjectSerializer::toQueryValue($original_file);
        }
        // query params
        if ($localized_format_string !== null) {
            $queryParams['localized_format_string'] = ObjectSerializer::toQueryValue($localized_format_string);
        }
        // query params
        if ($localized_format_key !== null) {
            $queryParams['localized_format_key'] = ObjectSerializer::toQueryValue($localized_format_key);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdKeysSearchPost
     *
     * @param string $project_id ProjectId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param string $locale_id  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TranslationKey[]
     */
    public function projectsProjectIdKeysSearchPost($project_id, $sort = null, $order = null, $q = null, $locale_id = null, $per_page = '25', $page = '1')
    {
        list($response) = $this->projectsProjectIdKeysSearchPostWithHttpInfo($project_id, $sort, $order, $q, $locale_id, $per_page, $page);
        return $response;
    }

    /**
     * Operation projectsProjectIdKeysSearchPostWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param string $locale_id  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TranslationKey[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdKeysSearchPostWithHttpInfo($project_id, $sort = null, $order = null, $q = null, $locale_id = null, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\TranslationKey[]';
        $request = $this->projectsProjectIdKeysSearchPostRequest($project_id, $sort, $order, $q, $locale_id, $per_page, $page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\TranslationKey[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdKeysSearchPostAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param string $locale_id  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysSearchPostAsync($project_id, $sort = null, $order = null, $q = null, $locale_id = null, $per_page = '25', $page = '1')
    {
        return $this->projectsProjectIdKeysSearchPostAsyncWithHttpInfo($project_id, $sort, $order, $q, $locale_id, $per_page, $page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdKeysSearchPostAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param string $locale_id  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysSearchPostAsyncWithHttpInfo($project_id, $sort = null, $order = null, $q = null, $locale_id = null, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\TranslationKey[]';
        $request = $this->projectsProjectIdKeysSearchPostRequest($project_id, $sort, $order, $q, $locale_id, $per_page, $page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdKeysSearchPost'
     *
     * @param string $project_id ProjectId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param string $locale_id  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdKeysSearchPostRequest($project_id, $sort = null, $order = null, $q = null, $locale_id = null, $per_page = '25', $page = '1')
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdKeysSearchPost');
        }

        $resourcePath = '/projects/{ProjectId}/keys/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q);
        }
        // query params
        if ($locale_id !== null) {
            $queryParams['locale_id'] = ObjectSerializer::toQueryValue($locale_id);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdKeysTagPatch
     *
     * @param string $tags  (required)
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $locale_id  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AffectedResources
     */
    public function projectsProjectIdKeysTagPatch($tags, $project_id, $q = null, $locale_id = null)
    {
        list($response) = $this->projectsProjectIdKeysTagPatchWithHttpInfo($tags, $project_id, $q, $locale_id);
        return $response;
    }

    /**
     * Operation projectsProjectIdKeysTagPatchWithHttpInfo
     *
     * @param string $tags  (required)
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $locale_id  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AffectedResources, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdKeysTagPatchWithHttpInfo($tags, $project_id, $q = null, $locale_id = null)
    {
        $returnType = '\Swagger\Client\Model\AffectedResources';
        $request = $this->projectsProjectIdKeysTagPatchRequest($tags, $project_id, $q, $locale_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\AffectedResources', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdKeysTagPatchAsync
     *
     * 
     *
     * @param string $tags  (required)
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $locale_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysTagPatchAsync($tags, $project_id, $q = null, $locale_id = null)
    {
        return $this->projectsProjectIdKeysTagPatchAsyncWithHttpInfo($tags, $project_id, $q, $locale_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdKeysTagPatchAsyncWithHttpInfo
     *
     * 
     *
     * @param string $tags  (required)
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $locale_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysTagPatchAsyncWithHttpInfo($tags, $project_id, $q = null, $locale_id = null)
    {
        $returnType = '\Swagger\Client\Model\AffectedResources';
        $request = $this->projectsProjectIdKeysTagPatchRequest($tags, $project_id, $q, $locale_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdKeysTagPatch'
     *
     * @param string $tags  (required)
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $locale_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdKeysTagPatchRequest($tags, $project_id, $q = null, $locale_id = null)
    {
        // verify the required parameter 'tags' is set
        if ($tags === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tags when calling projectsProjectIdKeysTagPatch');
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdKeysTagPatch');
        }

        $resourcePath = '/projects/{ProjectId}/keys/tag';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q);
        }
        // query params
        if ($locale_id !== null) {
            $queryParams['locale_id'] = ObjectSerializer::toQueryValue($locale_id);
        }
        // query params
        if ($tags !== null) {
            $queryParams['tags'] = ObjectSerializer::toQueryValue($tags);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdKeysUntagPatch
     *
     * @param string $tags  (required)
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $locale_id  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AffectedResources
     */
    public function projectsProjectIdKeysUntagPatch($tags, $project_id, $q = null, $locale_id = null)
    {
        list($response) = $this->projectsProjectIdKeysUntagPatchWithHttpInfo($tags, $project_id, $q, $locale_id);
        return $response;
    }

    /**
     * Operation projectsProjectIdKeysUntagPatchWithHttpInfo
     *
     * @param string $tags  (required)
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $locale_id  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AffectedResources, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdKeysUntagPatchWithHttpInfo($tags, $project_id, $q = null, $locale_id = null)
    {
        $returnType = '\Swagger\Client\Model\AffectedResources';
        $request = $this->projectsProjectIdKeysUntagPatchRequest($tags, $project_id, $q, $locale_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\AffectedResources', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdKeysUntagPatchAsync
     *
     * 
     *
     * @param string $tags  (required)
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $locale_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysUntagPatchAsync($tags, $project_id, $q = null, $locale_id = null)
    {
        return $this->projectsProjectIdKeysUntagPatchAsyncWithHttpInfo($tags, $project_id, $q, $locale_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdKeysUntagPatchAsyncWithHttpInfo
     *
     * 
     *
     * @param string $tags  (required)
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $locale_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdKeysUntagPatchAsyncWithHttpInfo($tags, $project_id, $q = null, $locale_id = null)
    {
        $returnType = '\Swagger\Client\Model\AffectedResources';
        $request = $this->projectsProjectIdKeysUntagPatchRequest($tags, $project_id, $q, $locale_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdKeysUntagPatch'
     *
     * @param string $tags  (required)
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $locale_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdKeysUntagPatchRequest($tags, $project_id, $q = null, $locale_id = null)
    {
        // verify the required parameter 'tags' is set
        if ($tags === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tags when calling projectsProjectIdKeysUntagPatch');
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdKeysUntagPatch');
        }

        $resourcePath = '/projects/{ProjectId}/keys/untag';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q);
        }
        // query params
        if ($locale_id !== null) {
            $queryParams['locale_id'] = ObjectSerializer::toQueryValue($locale_id);
        }
        // query params
        if ($tags !== null) {
            $queryParams['tags'] = ObjectSerializer::toQueryValue($tags);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdLocalesGet
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Locale[]
     */
    public function projectsProjectIdLocalesGet($project_id, $per_page = '25', $page = '1')
    {
        list($response) = $this->projectsProjectIdLocalesGetWithHttpInfo($project_id, $per_page, $page);
        return $response;
    }

    /**
     * Operation projectsProjectIdLocalesGetWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Locale[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdLocalesGetWithHttpInfo($project_id, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Locale[]';
        $request = $this->projectsProjectIdLocalesGetRequest($project_id, $per_page, $page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Locale[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdLocalesGetAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdLocalesGetAsync($project_id, $per_page = '25', $page = '1')
    {
        return $this->projectsProjectIdLocalesGetAsyncWithHttpInfo($project_id, $per_page, $page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdLocalesGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdLocalesGetAsyncWithHttpInfo($project_id, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Locale[]';
        $request = $this->projectsProjectIdLocalesGetRequest($project_id, $per_page, $page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdLocalesGet'
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdLocalesGetRequest($project_id, $per_page = '25', $page = '1')
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdLocalesGet');
        }

        $resourcePath = '/projects/{ProjectId}/locales';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdLocalesIdDelete
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function projectsProjectIdLocalesIdDelete($project_id, $id)
    {
        $this->projectsProjectIdLocalesIdDeleteWithHttpInfo($project_id, $id);
    }

    /**
     * Operation projectsProjectIdLocalesIdDeleteWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdLocalesIdDeleteWithHttpInfo($project_id, $id)
    {
        $returnType = '';
        $request = $this->projectsProjectIdLocalesIdDeleteRequest($project_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdLocalesIdDeleteAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdLocalesIdDeleteAsync($project_id, $id)
    {
        return $this->projectsProjectIdLocalesIdDeleteAsyncWithHttpInfo($project_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdLocalesIdDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdLocalesIdDeleteAsyncWithHttpInfo($project_id, $id)
    {
        $returnType = '';
        $request = $this->projectsProjectIdLocalesIdDeleteRequest($project_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdLocalesIdDelete'
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdLocalesIdDeleteRequest($project_id, $id)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdLocalesIdDelete');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdLocalesIdDelete');
        }

        $resourcePath = '/projects/{ProjectId}/locales/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdLocalesIdDownloadGet
     *
     * @param string $file_format  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param string $tag  (optional)
     * @param bool $include_empty_translations  (optional)
     * @param bool $keep_notranslate_tags  (optional)
     * @param bool $convert_emoji  (optional)
     * @param string $format_options  (optional)
     * @param string $encoding  (optional)
     * @param bool $skip_unverified_translations  (optional)
     * @param string $fallback_locale_id  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function projectsProjectIdLocalesIdDownloadGet($file_format, $project_id, $id, $tag = null, $include_empty_translations = null, $keep_notranslate_tags = null, $convert_emoji = null, $format_options = null, $encoding = null, $skip_unverified_translations = null, $fallback_locale_id = null)
    {
        $this->projectsProjectIdLocalesIdDownloadGetWithHttpInfo($file_format, $project_id, $id, $tag, $include_empty_translations, $keep_notranslate_tags, $convert_emoji, $format_options, $encoding, $skip_unverified_translations, $fallback_locale_id);
    }

    /**
     * Operation projectsProjectIdLocalesIdDownloadGetWithHttpInfo
     *
     * @param string $file_format  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param string $tag  (optional)
     * @param bool $include_empty_translations  (optional)
     * @param bool $keep_notranslate_tags  (optional)
     * @param bool $convert_emoji  (optional)
     * @param string $format_options  (optional)
     * @param string $encoding  (optional)
     * @param bool $skip_unverified_translations  (optional)
     * @param string $fallback_locale_id  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdLocalesIdDownloadGetWithHttpInfo($file_format, $project_id, $id, $tag = null, $include_empty_translations = null, $keep_notranslate_tags = null, $convert_emoji = null, $format_options = null, $encoding = null, $skip_unverified_translations = null, $fallback_locale_id = null)
    {
        $returnType = '';
        $request = $this->projectsProjectIdLocalesIdDownloadGetRequest($file_format, $project_id, $id, $tag, $include_empty_translations, $keep_notranslate_tags, $convert_emoji, $format_options, $encoding, $skip_unverified_translations, $fallback_locale_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdLocalesIdDownloadGetAsync
     *
     * 
     *
     * @param string $file_format  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param string $tag  (optional)
     * @param bool $include_empty_translations  (optional)
     * @param bool $keep_notranslate_tags  (optional)
     * @param bool $convert_emoji  (optional)
     * @param string $format_options  (optional)
     * @param string $encoding  (optional)
     * @param bool $skip_unverified_translations  (optional)
     * @param string $fallback_locale_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdLocalesIdDownloadGetAsync($file_format, $project_id, $id, $tag = null, $include_empty_translations = null, $keep_notranslate_tags = null, $convert_emoji = null, $format_options = null, $encoding = null, $skip_unverified_translations = null, $fallback_locale_id = null)
    {
        return $this->projectsProjectIdLocalesIdDownloadGetAsyncWithHttpInfo($file_format, $project_id, $id, $tag, $include_empty_translations, $keep_notranslate_tags, $convert_emoji, $format_options, $encoding, $skip_unverified_translations, $fallback_locale_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdLocalesIdDownloadGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $file_format  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param string $tag  (optional)
     * @param bool $include_empty_translations  (optional)
     * @param bool $keep_notranslate_tags  (optional)
     * @param bool $convert_emoji  (optional)
     * @param string $format_options  (optional)
     * @param string $encoding  (optional)
     * @param bool $skip_unverified_translations  (optional)
     * @param string $fallback_locale_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdLocalesIdDownloadGetAsyncWithHttpInfo($file_format, $project_id, $id, $tag = null, $include_empty_translations = null, $keep_notranslate_tags = null, $convert_emoji = null, $format_options = null, $encoding = null, $skip_unverified_translations = null, $fallback_locale_id = null)
    {
        $returnType = '';
        $request = $this->projectsProjectIdLocalesIdDownloadGetRequest($file_format, $project_id, $id, $tag, $include_empty_translations, $keep_notranslate_tags, $convert_emoji, $format_options, $encoding, $skip_unverified_translations, $fallback_locale_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdLocalesIdDownloadGet'
     *
     * @param string $file_format  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param string $tag  (optional)
     * @param bool $include_empty_translations  (optional)
     * @param bool $keep_notranslate_tags  (optional)
     * @param bool $convert_emoji  (optional)
     * @param string $format_options  (optional)
     * @param string $encoding  (optional)
     * @param bool $skip_unverified_translations  (optional)
     * @param string $fallback_locale_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdLocalesIdDownloadGetRequest($file_format, $project_id, $id, $tag = null, $include_empty_translations = null, $keep_notranslate_tags = null, $convert_emoji = null, $format_options = null, $encoding = null, $skip_unverified_translations = null, $fallback_locale_id = null)
    {
        // verify the required parameter 'file_format' is set
        if ($file_format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_format when calling projectsProjectIdLocalesIdDownloadGet');
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdLocalesIdDownloadGet');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdLocalesIdDownloadGet');
        }

        $resourcePath = '/projects/{ProjectId}/locales/{Id}/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($file_format !== null) {
            $queryParams['file_format'] = ObjectSerializer::toQueryValue($file_format);
        }
        // query params
        if ($tag !== null) {
            $queryParams['tag'] = ObjectSerializer::toQueryValue($tag);
        }
        // query params
        if ($include_empty_translations !== null) {
            $queryParams['include_empty_translations'] = ObjectSerializer::toQueryValue($include_empty_translations);
        }
        // query params
        if ($keep_notranslate_tags !== null) {
            $queryParams['keep_notranslate_tags'] = ObjectSerializer::toQueryValue($keep_notranslate_tags);
        }
        // query params
        if ($convert_emoji !== null) {
            $queryParams['convert_emoji'] = ObjectSerializer::toQueryValue($convert_emoji);
        }
        // query params
        if ($format_options !== null) {
            $queryParams['format_options'] = ObjectSerializer::toQueryValue($format_options);
        }
        // query params
        if ($encoding !== null) {
            $queryParams['encoding'] = ObjectSerializer::toQueryValue($encoding);
        }
        // query params
        if ($skip_unverified_translations !== null) {
            $queryParams['skip_unverified_translations'] = ObjectSerializer::toQueryValue($skip_unverified_translations);
        }
        // query params
        if ($fallback_locale_id !== null) {
            $queryParams['fallback_locale_id'] = ObjectSerializer::toQueryValue($fallback_locale_id);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdLocalesIdGet
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Locale
     */
    public function projectsProjectIdLocalesIdGet($project_id, $id)
    {
        list($response) = $this->projectsProjectIdLocalesIdGetWithHttpInfo($project_id, $id);
        return $response;
    }

    /**
     * Operation projectsProjectIdLocalesIdGetWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Locale, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdLocalesIdGetWithHttpInfo($project_id, $id)
    {
        $returnType = '\Swagger\Client\Model\Locale';
        $request = $this->projectsProjectIdLocalesIdGetRequest($project_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Locale', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdLocalesIdGetAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdLocalesIdGetAsync($project_id, $id)
    {
        return $this->projectsProjectIdLocalesIdGetAsyncWithHttpInfo($project_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdLocalesIdGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdLocalesIdGetAsyncWithHttpInfo($project_id, $id)
    {
        $returnType = '\Swagger\Client\Model\Locale';
        $request = $this->projectsProjectIdLocalesIdGetRequest($project_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdLocalesIdGet'
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdLocalesIdGetRequest($project_id, $id)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdLocalesIdGet');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdLocalesIdGet');
        }

        $resourcePath = '/projects/{ProjectId}/locales/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdLocalesIdPatch
     *
     * @param string $name  (required)
     * @param string $code  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param bool $default  (optional)
     * @param bool $main  (optional)
     * @param bool $rtl  (optional)
     * @param string $source_locale_id  (optional)
     * @param bool $unverify_new_translations  (optional)
     * @param bool $unverify_updated_translations  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\LocaleDetails
     */
    public function projectsProjectIdLocalesIdPatch($name, $code, $project_id, $id, $default = null, $main = null, $rtl = null, $source_locale_id = null, $unverify_new_translations = null, $unverify_updated_translations = null)
    {
        list($response) = $this->projectsProjectIdLocalesIdPatchWithHttpInfo($name, $code, $project_id, $id, $default, $main, $rtl, $source_locale_id, $unverify_new_translations, $unverify_updated_translations);
        return $response;
    }

    /**
     * Operation projectsProjectIdLocalesIdPatchWithHttpInfo
     *
     * @param string $name  (required)
     * @param string $code  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param bool $default  (optional)
     * @param bool $main  (optional)
     * @param bool $rtl  (optional)
     * @param string $source_locale_id  (optional)
     * @param bool $unverify_new_translations  (optional)
     * @param bool $unverify_updated_translations  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\LocaleDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdLocalesIdPatchWithHttpInfo($name, $code, $project_id, $id, $default = null, $main = null, $rtl = null, $source_locale_id = null, $unverify_new_translations = null, $unverify_updated_translations = null)
    {
        $returnType = '\Swagger\Client\Model\LocaleDetails';
        $request = $this->projectsProjectIdLocalesIdPatchRequest($name, $code, $project_id, $id, $default, $main, $rtl, $source_locale_id, $unverify_new_translations, $unverify_updated_translations);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\LocaleDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdLocalesIdPatchAsync
     *
     * 
     *
     * @param string $name  (required)
     * @param string $code  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param bool $default  (optional)
     * @param bool $main  (optional)
     * @param bool $rtl  (optional)
     * @param string $source_locale_id  (optional)
     * @param bool $unverify_new_translations  (optional)
     * @param bool $unverify_updated_translations  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdLocalesIdPatchAsync($name, $code, $project_id, $id, $default = null, $main = null, $rtl = null, $source_locale_id = null, $unverify_new_translations = null, $unverify_updated_translations = null)
    {
        return $this->projectsProjectIdLocalesIdPatchAsyncWithHttpInfo($name, $code, $project_id, $id, $default, $main, $rtl, $source_locale_id, $unverify_new_translations, $unverify_updated_translations)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdLocalesIdPatchAsyncWithHttpInfo
     *
     * 
     *
     * @param string $name  (required)
     * @param string $code  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param bool $default  (optional)
     * @param bool $main  (optional)
     * @param bool $rtl  (optional)
     * @param string $source_locale_id  (optional)
     * @param bool $unverify_new_translations  (optional)
     * @param bool $unverify_updated_translations  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdLocalesIdPatchAsyncWithHttpInfo($name, $code, $project_id, $id, $default = null, $main = null, $rtl = null, $source_locale_id = null, $unverify_new_translations = null, $unverify_updated_translations = null)
    {
        $returnType = '\Swagger\Client\Model\LocaleDetails';
        $request = $this->projectsProjectIdLocalesIdPatchRequest($name, $code, $project_id, $id, $default, $main, $rtl, $source_locale_id, $unverify_new_translations, $unverify_updated_translations);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdLocalesIdPatch'
     *
     * @param string $name  (required)
     * @param string $code  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param bool $default  (optional)
     * @param bool $main  (optional)
     * @param bool $rtl  (optional)
     * @param string $source_locale_id  (optional)
     * @param bool $unverify_new_translations  (optional)
     * @param bool $unverify_updated_translations  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdLocalesIdPatchRequest($name, $code, $project_id, $id, $default = null, $main = null, $rtl = null, $source_locale_id = null, $unverify_new_translations = null, $unverify_updated_translations = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling projectsProjectIdLocalesIdPatch');
        }
        // verify the required parameter 'code' is set
        if ($code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $code when calling projectsProjectIdLocalesIdPatch');
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdLocalesIdPatch');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdLocalesIdPatch');
        }

        $resourcePath = '/projects/{ProjectId}/locales/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($code !== null) {
            $queryParams['code'] = ObjectSerializer::toQueryValue($code);
        }
        // query params
        if ($default !== null) {
            $queryParams['default'] = ObjectSerializer::toQueryValue($default);
        }
        // query params
        if ($main !== null) {
            $queryParams['main'] = ObjectSerializer::toQueryValue($main);
        }
        // query params
        if ($rtl !== null) {
            $queryParams['rtl'] = ObjectSerializer::toQueryValue($rtl);
        }
        // query params
        if ($source_locale_id !== null) {
            $queryParams['source_locale_id'] = ObjectSerializer::toQueryValue($source_locale_id);
        }
        // query params
        if ($unverify_new_translations !== null) {
            $queryParams['unverify_new_translations'] = ObjectSerializer::toQueryValue($unverify_new_translations);
        }
        // query params
        if ($unverify_updated_translations !== null) {
            $queryParams['unverify_updated_translations'] = ObjectSerializer::toQueryValue($unverify_updated_translations);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdLocalesLocaleIdTranslationsGet
     *
     * @param string $project_id ProjectId (required)
     * @param string $locale_id LocaleId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Translation
     */
    public function projectsProjectIdLocalesLocaleIdTranslationsGet($project_id, $locale_id, $sort = null, $order = null, $q = null, $per_page = '25', $page = '1')
    {
        list($response) = $this->projectsProjectIdLocalesLocaleIdTranslationsGetWithHttpInfo($project_id, $locale_id, $sort, $order, $q, $per_page, $page);
        return $response;
    }

    /**
     * Operation projectsProjectIdLocalesLocaleIdTranslationsGetWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $locale_id LocaleId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Translation, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdLocalesLocaleIdTranslationsGetWithHttpInfo($project_id, $locale_id, $sort = null, $order = null, $q = null, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Translation';
        $request = $this->projectsProjectIdLocalesLocaleIdTranslationsGetRequest($project_id, $locale_id, $sort, $order, $q, $per_page, $page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Translation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdLocalesLocaleIdTranslationsGetAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $locale_id LocaleId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdLocalesLocaleIdTranslationsGetAsync($project_id, $locale_id, $sort = null, $order = null, $q = null, $per_page = '25', $page = '1')
    {
        return $this->projectsProjectIdLocalesLocaleIdTranslationsGetAsyncWithHttpInfo($project_id, $locale_id, $sort, $order, $q, $per_page, $page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdLocalesLocaleIdTranslationsGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $locale_id LocaleId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdLocalesLocaleIdTranslationsGetAsyncWithHttpInfo($project_id, $locale_id, $sort = null, $order = null, $q = null, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Translation';
        $request = $this->projectsProjectIdLocalesLocaleIdTranslationsGetRequest($project_id, $locale_id, $sort, $order, $q, $per_page, $page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdLocalesLocaleIdTranslationsGet'
     *
     * @param string $project_id ProjectId (required)
     * @param string $locale_id LocaleId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdLocalesLocaleIdTranslationsGetRequest($project_id, $locale_id, $sort = null, $order = null, $q = null, $per_page = '25', $page = '1')
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdLocalesLocaleIdTranslationsGet');
        }
        // verify the required parameter 'locale_id' is set
        if ($locale_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $locale_id when calling projectsProjectIdLocalesLocaleIdTranslationsGet');
        }

        $resourcePath = '/projects/{ProjectId}/locales/{LocaleId}/translations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($locale_id !== null) {
            $resourcePath = str_replace('{' . 'LocaleId' . '}', ObjectSerializer::toPathValue($locale_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdLocalesPost
     *
     * @param string $name  (required)
     * @param string $code  (required)
     * @param string $project_id ProjectId (required)
     * @param bool $default  (optional)
     * @param bool $main  (optional)
     * @param bool $rtl  (optional)
     * @param string $source_locale_id  (optional)
     * @param bool $unverify_new_translations  (optional)
     * @param bool $unverify_updated_translations  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\LocaleDetails
     */
    public function projectsProjectIdLocalesPost($name, $code, $project_id, $default = null, $main = null, $rtl = null, $source_locale_id = null, $unverify_new_translations = null, $unverify_updated_translations = null)
    {
        list($response) = $this->projectsProjectIdLocalesPostWithHttpInfo($name, $code, $project_id, $default, $main, $rtl, $source_locale_id, $unverify_new_translations, $unverify_updated_translations);
        return $response;
    }

    /**
     * Operation projectsProjectIdLocalesPostWithHttpInfo
     *
     * @param string $name  (required)
     * @param string $code  (required)
     * @param string $project_id ProjectId (required)
     * @param bool $default  (optional)
     * @param bool $main  (optional)
     * @param bool $rtl  (optional)
     * @param string $source_locale_id  (optional)
     * @param bool $unverify_new_translations  (optional)
     * @param bool $unverify_updated_translations  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\LocaleDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdLocalesPostWithHttpInfo($name, $code, $project_id, $default = null, $main = null, $rtl = null, $source_locale_id = null, $unverify_new_translations = null, $unverify_updated_translations = null)
    {
        $returnType = '\Swagger\Client\Model\LocaleDetails';
        $request = $this->projectsProjectIdLocalesPostRequest($name, $code, $project_id, $default, $main, $rtl, $source_locale_id, $unverify_new_translations, $unverify_updated_translations);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\LocaleDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdLocalesPostAsync
     *
     * 
     *
     * @param string $name  (required)
     * @param string $code  (required)
     * @param string $project_id ProjectId (required)
     * @param bool $default  (optional)
     * @param bool $main  (optional)
     * @param bool $rtl  (optional)
     * @param string $source_locale_id  (optional)
     * @param bool $unverify_new_translations  (optional)
     * @param bool $unverify_updated_translations  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdLocalesPostAsync($name, $code, $project_id, $default = null, $main = null, $rtl = null, $source_locale_id = null, $unverify_new_translations = null, $unverify_updated_translations = null)
    {
        return $this->projectsProjectIdLocalesPostAsyncWithHttpInfo($name, $code, $project_id, $default, $main, $rtl, $source_locale_id, $unverify_new_translations, $unverify_updated_translations)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdLocalesPostAsyncWithHttpInfo
     *
     * 
     *
     * @param string $name  (required)
     * @param string $code  (required)
     * @param string $project_id ProjectId (required)
     * @param bool $default  (optional)
     * @param bool $main  (optional)
     * @param bool $rtl  (optional)
     * @param string $source_locale_id  (optional)
     * @param bool $unverify_new_translations  (optional)
     * @param bool $unverify_updated_translations  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdLocalesPostAsyncWithHttpInfo($name, $code, $project_id, $default = null, $main = null, $rtl = null, $source_locale_id = null, $unverify_new_translations = null, $unverify_updated_translations = null)
    {
        $returnType = '\Swagger\Client\Model\LocaleDetails';
        $request = $this->projectsProjectIdLocalesPostRequest($name, $code, $project_id, $default, $main, $rtl, $source_locale_id, $unverify_new_translations, $unverify_updated_translations);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdLocalesPost'
     *
     * @param string $name  (required)
     * @param string $code  (required)
     * @param string $project_id ProjectId (required)
     * @param bool $default  (optional)
     * @param bool $main  (optional)
     * @param bool $rtl  (optional)
     * @param string $source_locale_id  (optional)
     * @param bool $unverify_new_translations  (optional)
     * @param bool $unverify_updated_translations  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdLocalesPostRequest($name, $code, $project_id, $default = null, $main = null, $rtl = null, $source_locale_id = null, $unverify_new_translations = null, $unverify_updated_translations = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling projectsProjectIdLocalesPost');
        }
        // verify the required parameter 'code' is set
        if ($code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $code when calling projectsProjectIdLocalesPost');
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdLocalesPost');
        }

        $resourcePath = '/projects/{ProjectId}/locales';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($code !== null) {
            $queryParams['code'] = ObjectSerializer::toQueryValue($code);
        }
        // query params
        if ($default !== null) {
            $queryParams['default'] = ObjectSerializer::toQueryValue($default);
        }
        // query params
        if ($main !== null) {
            $queryParams['main'] = ObjectSerializer::toQueryValue($main);
        }
        // query params
        if ($rtl !== null) {
            $queryParams['rtl'] = ObjectSerializer::toQueryValue($rtl);
        }
        // query params
        if ($source_locale_id !== null) {
            $queryParams['source_locale_id'] = ObjectSerializer::toQueryValue($source_locale_id);
        }
        // query params
        if ($unverify_new_translations !== null) {
            $queryParams['unverify_new_translations'] = ObjectSerializer::toQueryValue($unverify_new_translations);
        }
        // query params
        if ($unverify_updated_translations !== null) {
            $queryParams['unverify_updated_translations'] = ObjectSerializer::toQueryValue($unverify_updated_translations);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdOrdersGet
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TranslationOrder[]
     */
    public function projectsProjectIdOrdersGet($project_id, $per_page = '25', $page = '1')
    {
        list($response) = $this->projectsProjectIdOrdersGetWithHttpInfo($project_id, $per_page, $page);
        return $response;
    }

    /**
     * Operation projectsProjectIdOrdersGetWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TranslationOrder[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdOrdersGetWithHttpInfo($project_id, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\TranslationOrder[]';
        $request = $this->projectsProjectIdOrdersGetRequest($project_id, $per_page, $page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\TranslationOrder[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdOrdersGetAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdOrdersGetAsync($project_id, $per_page = '25', $page = '1')
    {
        return $this->projectsProjectIdOrdersGetAsyncWithHttpInfo($project_id, $per_page, $page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdOrdersGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdOrdersGetAsyncWithHttpInfo($project_id, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\TranslationOrder[]';
        $request = $this->projectsProjectIdOrdersGetRequest($project_id, $per_page, $page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdOrdersGet'
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdOrdersGetRequest($project_id, $per_page = '25', $page = '1')
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdOrdersGet');
        }

        $resourcePath = '/projects/{ProjectId}/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdOrdersIdConfirmPatch
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TranslationOrder
     */
    public function projectsProjectIdOrdersIdConfirmPatch($project_id, $id)
    {
        list($response) = $this->projectsProjectIdOrdersIdConfirmPatchWithHttpInfo($project_id, $id);
        return $response;
    }

    /**
     * Operation projectsProjectIdOrdersIdConfirmPatchWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TranslationOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdOrdersIdConfirmPatchWithHttpInfo($project_id, $id)
    {
        $returnType = '\Swagger\Client\Model\TranslationOrder';
        $request = $this->projectsProjectIdOrdersIdConfirmPatchRequest($project_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\TranslationOrder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdOrdersIdConfirmPatchAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdOrdersIdConfirmPatchAsync($project_id, $id)
    {
        return $this->projectsProjectIdOrdersIdConfirmPatchAsyncWithHttpInfo($project_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdOrdersIdConfirmPatchAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdOrdersIdConfirmPatchAsyncWithHttpInfo($project_id, $id)
    {
        $returnType = '\Swagger\Client\Model\TranslationOrder';
        $request = $this->projectsProjectIdOrdersIdConfirmPatchRequest($project_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdOrdersIdConfirmPatch'
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdOrdersIdConfirmPatchRequest($project_id, $id)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdOrdersIdConfirmPatch');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdOrdersIdConfirmPatch');
        }

        $resourcePath = '/projects/{ProjectId}/orders/{Id}/confirm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdOrdersIdDelete
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function projectsProjectIdOrdersIdDelete($project_id, $id)
    {
        $this->projectsProjectIdOrdersIdDeleteWithHttpInfo($project_id, $id);
    }

    /**
     * Operation projectsProjectIdOrdersIdDeleteWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdOrdersIdDeleteWithHttpInfo($project_id, $id)
    {
        $returnType = '';
        $request = $this->projectsProjectIdOrdersIdDeleteRequest($project_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdOrdersIdDeleteAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdOrdersIdDeleteAsync($project_id, $id)
    {
        return $this->projectsProjectIdOrdersIdDeleteAsyncWithHttpInfo($project_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdOrdersIdDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdOrdersIdDeleteAsyncWithHttpInfo($project_id, $id)
    {
        $returnType = '';
        $request = $this->projectsProjectIdOrdersIdDeleteRequest($project_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdOrdersIdDelete'
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdOrdersIdDeleteRequest($project_id, $id)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdOrdersIdDelete');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdOrdersIdDelete');
        }

        $resourcePath = '/projects/{ProjectId}/orders/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdOrdersIdGet
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TranslationOrder
     */
    public function projectsProjectIdOrdersIdGet($project_id, $id)
    {
        list($response) = $this->projectsProjectIdOrdersIdGetWithHttpInfo($project_id, $id);
        return $response;
    }

    /**
     * Operation projectsProjectIdOrdersIdGetWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TranslationOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdOrdersIdGetWithHttpInfo($project_id, $id)
    {
        $returnType = '\Swagger\Client\Model\TranslationOrder';
        $request = $this->projectsProjectIdOrdersIdGetRequest($project_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\TranslationOrder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdOrdersIdGetAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdOrdersIdGetAsync($project_id, $id)
    {
        return $this->projectsProjectIdOrdersIdGetAsyncWithHttpInfo($project_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdOrdersIdGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdOrdersIdGetAsyncWithHttpInfo($project_id, $id)
    {
        $returnType = '\Swagger\Client\Model\TranslationOrder';
        $request = $this->projectsProjectIdOrdersIdGetRequest($project_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdOrdersIdGet'
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdOrdersIdGetRequest($project_id, $id)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdOrdersIdGet');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdOrdersIdGet');
        }

        $resourcePath = '/projects/{ProjectId}/orders/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdOrdersPost
     *
     * @param string $lsp  (required)
     * @param string $source_locale_id  (required)
     * @param string $target_locale_ids  (required)
     * @param string $translation_type  (required)
     * @param string $category  (required)
     * @param string $project_id ProjectId (required)
     * @param string $tag  (optional)
     * @param string $message  (optional)
     * @param string $styleguide_id  (optional)
     * @param bool $unverify_translations_upon_delivery  (optional)
     * @param bool $include_untranslated_keys  (optional)
     * @param bool $include_unverified_translations  (optional)
     * @param bool $quality  (optional)
     * @param bool $priority  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TranslationOrder
     */
    public function projectsProjectIdOrdersPost($lsp, $source_locale_id, $target_locale_ids, $translation_type, $category, $project_id, $tag = null, $message = null, $styleguide_id = null, $unverify_translations_upon_delivery = null, $include_untranslated_keys = null, $include_unverified_translations = null, $quality = null, $priority = null)
    {
        list($response) = $this->projectsProjectIdOrdersPostWithHttpInfo($lsp, $source_locale_id, $target_locale_ids, $translation_type, $category, $project_id, $tag, $message, $styleguide_id, $unverify_translations_upon_delivery, $include_untranslated_keys, $include_unverified_translations, $quality, $priority);
        return $response;
    }

    /**
     * Operation projectsProjectIdOrdersPostWithHttpInfo
     *
     * @param string $lsp  (required)
     * @param string $source_locale_id  (required)
     * @param string $target_locale_ids  (required)
     * @param string $translation_type  (required)
     * @param string $category  (required)
     * @param string $project_id ProjectId (required)
     * @param string $tag  (optional)
     * @param string $message  (optional)
     * @param string $styleguide_id  (optional)
     * @param bool $unverify_translations_upon_delivery  (optional)
     * @param bool $include_untranslated_keys  (optional)
     * @param bool $include_unverified_translations  (optional)
     * @param bool $quality  (optional)
     * @param bool $priority  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TranslationOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdOrdersPostWithHttpInfo($lsp, $source_locale_id, $target_locale_ids, $translation_type, $category, $project_id, $tag = null, $message = null, $styleguide_id = null, $unverify_translations_upon_delivery = null, $include_untranslated_keys = null, $include_unverified_translations = null, $quality = null, $priority = null)
    {
        $returnType = '\Swagger\Client\Model\TranslationOrder';
        $request = $this->projectsProjectIdOrdersPostRequest($lsp, $source_locale_id, $target_locale_ids, $translation_type, $category, $project_id, $tag, $message, $styleguide_id, $unverify_translations_upon_delivery, $include_untranslated_keys, $include_unverified_translations, $quality, $priority);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\TranslationOrder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdOrdersPostAsync
     *
     * 
     *
     * @param string $lsp  (required)
     * @param string $source_locale_id  (required)
     * @param string $target_locale_ids  (required)
     * @param string $translation_type  (required)
     * @param string $category  (required)
     * @param string $project_id ProjectId (required)
     * @param string $tag  (optional)
     * @param string $message  (optional)
     * @param string $styleguide_id  (optional)
     * @param bool $unverify_translations_upon_delivery  (optional)
     * @param bool $include_untranslated_keys  (optional)
     * @param bool $include_unverified_translations  (optional)
     * @param bool $quality  (optional)
     * @param bool $priority  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdOrdersPostAsync($lsp, $source_locale_id, $target_locale_ids, $translation_type, $category, $project_id, $tag = null, $message = null, $styleguide_id = null, $unverify_translations_upon_delivery = null, $include_untranslated_keys = null, $include_unverified_translations = null, $quality = null, $priority = null)
    {
        return $this->projectsProjectIdOrdersPostAsyncWithHttpInfo($lsp, $source_locale_id, $target_locale_ids, $translation_type, $category, $project_id, $tag, $message, $styleguide_id, $unverify_translations_upon_delivery, $include_untranslated_keys, $include_unverified_translations, $quality, $priority)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdOrdersPostAsyncWithHttpInfo
     *
     * 
     *
     * @param string $lsp  (required)
     * @param string $source_locale_id  (required)
     * @param string $target_locale_ids  (required)
     * @param string $translation_type  (required)
     * @param string $category  (required)
     * @param string $project_id ProjectId (required)
     * @param string $tag  (optional)
     * @param string $message  (optional)
     * @param string $styleguide_id  (optional)
     * @param bool $unverify_translations_upon_delivery  (optional)
     * @param bool $include_untranslated_keys  (optional)
     * @param bool $include_unverified_translations  (optional)
     * @param bool $quality  (optional)
     * @param bool $priority  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdOrdersPostAsyncWithHttpInfo($lsp, $source_locale_id, $target_locale_ids, $translation_type, $category, $project_id, $tag = null, $message = null, $styleguide_id = null, $unverify_translations_upon_delivery = null, $include_untranslated_keys = null, $include_unverified_translations = null, $quality = null, $priority = null)
    {
        $returnType = '\Swagger\Client\Model\TranslationOrder';
        $request = $this->projectsProjectIdOrdersPostRequest($lsp, $source_locale_id, $target_locale_ids, $translation_type, $category, $project_id, $tag, $message, $styleguide_id, $unverify_translations_upon_delivery, $include_untranslated_keys, $include_unverified_translations, $quality, $priority);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdOrdersPost'
     *
     * @param string $lsp  (required)
     * @param string $source_locale_id  (required)
     * @param string $target_locale_ids  (required)
     * @param string $translation_type  (required)
     * @param string $category  (required)
     * @param string $project_id ProjectId (required)
     * @param string $tag  (optional)
     * @param string $message  (optional)
     * @param string $styleguide_id  (optional)
     * @param bool $unverify_translations_upon_delivery  (optional)
     * @param bool $include_untranslated_keys  (optional)
     * @param bool $include_unverified_translations  (optional)
     * @param bool $quality  (optional)
     * @param bool $priority  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdOrdersPostRequest($lsp, $source_locale_id, $target_locale_ids, $translation_type, $category, $project_id, $tag = null, $message = null, $styleguide_id = null, $unverify_translations_upon_delivery = null, $include_untranslated_keys = null, $include_unverified_translations = null, $quality = null, $priority = null)
    {
        // verify the required parameter 'lsp' is set
        if ($lsp === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lsp when calling projectsProjectIdOrdersPost');
        }
        // verify the required parameter 'source_locale_id' is set
        if ($source_locale_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $source_locale_id when calling projectsProjectIdOrdersPost');
        }
        // verify the required parameter 'target_locale_ids' is set
        if ($target_locale_ids === null) {
            throw new \InvalidArgumentException('Missing the required parameter $target_locale_ids when calling projectsProjectIdOrdersPost');
        }
        // verify the required parameter 'translation_type' is set
        if ($translation_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $translation_type when calling projectsProjectIdOrdersPost');
        }
        // verify the required parameter 'category' is set
        if ($category === null) {
            throw new \InvalidArgumentException('Missing the required parameter $category when calling projectsProjectIdOrdersPost');
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdOrdersPost');
        }

        $resourcePath = '/projects/{ProjectId}/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($lsp !== null) {
            $queryParams['lsp'] = ObjectSerializer::toQueryValue($lsp);
        }
        // query params
        if ($source_locale_id !== null) {
            $queryParams['source_locale_id'] = ObjectSerializer::toQueryValue($source_locale_id);
        }
        // query params
        if ($target_locale_ids !== null) {
            $queryParams['target_locale_ids'] = ObjectSerializer::toQueryValue($target_locale_ids);
        }
        // query params
        if ($translation_type !== null) {
            $queryParams['translation_type'] = ObjectSerializer::toQueryValue($translation_type);
        }
        // query params
        if ($tag !== null) {
            $queryParams['tag'] = ObjectSerializer::toQueryValue($tag);
        }
        // query params
        if ($message !== null) {
            $queryParams['message'] = ObjectSerializer::toQueryValue($message);
        }
        // query params
        if ($styleguide_id !== null) {
            $queryParams['styleguide_id'] = ObjectSerializer::toQueryValue($styleguide_id);
        }
        // query params
        if ($unverify_translations_upon_delivery !== null) {
            $queryParams['unverify_translations_upon_delivery'] = ObjectSerializer::toQueryValue($unverify_translations_upon_delivery);
        }
        // query params
        if ($include_untranslated_keys !== null) {
            $queryParams['include_untranslated_keys'] = ObjectSerializer::toQueryValue($include_untranslated_keys);
        }
        // query params
        if ($include_unverified_translations !== null) {
            $queryParams['include_unverified_translations'] = ObjectSerializer::toQueryValue($include_unverified_translations);
        }
        // query params
        if ($category !== null) {
            $queryParams['category'] = ObjectSerializer::toQueryValue($category);
        }
        // query params
        if ($quality !== null) {
            $queryParams['quality'] = ObjectSerializer::toQueryValue($quality);
        }
        // query params
        if ($priority !== null) {
            $queryParams['priority'] = ObjectSerializer::toQueryValue($priority);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdStyleguidesGet
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Styleguide[]
     */
    public function projectsProjectIdStyleguidesGet($project_id, $per_page = '25', $page = '1')
    {
        list($response) = $this->projectsProjectIdStyleguidesGetWithHttpInfo($project_id, $per_page, $page);
        return $response;
    }

    /**
     * Operation projectsProjectIdStyleguidesGetWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Styleguide[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdStyleguidesGetWithHttpInfo($project_id, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Styleguide[]';
        $request = $this->projectsProjectIdStyleguidesGetRequest($project_id, $per_page, $page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Styleguide[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdStyleguidesGetAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdStyleguidesGetAsync($project_id, $per_page = '25', $page = '1')
    {
        return $this->projectsProjectIdStyleguidesGetAsyncWithHttpInfo($project_id, $per_page, $page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdStyleguidesGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdStyleguidesGetAsyncWithHttpInfo($project_id, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Styleguide[]';
        $request = $this->projectsProjectIdStyleguidesGetRequest($project_id, $per_page, $page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdStyleguidesGet'
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdStyleguidesGetRequest($project_id, $per_page = '25', $page = '1')
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdStyleguidesGet');
        }

        $resourcePath = '/projects/{ProjectId}/styleguides';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdStyleguidesIdDelete
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function projectsProjectIdStyleguidesIdDelete($project_id, $id)
    {
        $this->projectsProjectIdStyleguidesIdDeleteWithHttpInfo($project_id, $id);
    }

    /**
     * Operation projectsProjectIdStyleguidesIdDeleteWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdStyleguidesIdDeleteWithHttpInfo($project_id, $id)
    {
        $returnType = '';
        $request = $this->projectsProjectIdStyleguidesIdDeleteRequest($project_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdStyleguidesIdDeleteAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdStyleguidesIdDeleteAsync($project_id, $id)
    {
        return $this->projectsProjectIdStyleguidesIdDeleteAsyncWithHttpInfo($project_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdStyleguidesIdDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdStyleguidesIdDeleteAsyncWithHttpInfo($project_id, $id)
    {
        $returnType = '';
        $request = $this->projectsProjectIdStyleguidesIdDeleteRequest($project_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdStyleguidesIdDelete'
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdStyleguidesIdDeleteRequest($project_id, $id)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdStyleguidesIdDelete');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdStyleguidesIdDelete');
        }

        $resourcePath = '/projects/{ProjectId}/styleguides/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdStyleguidesIdGet
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Styleguide
     */
    public function projectsProjectIdStyleguidesIdGet($project_id, $id)
    {
        list($response) = $this->projectsProjectIdStyleguidesIdGetWithHttpInfo($project_id, $id);
        return $response;
    }

    /**
     * Operation projectsProjectIdStyleguidesIdGetWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Styleguide, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdStyleguidesIdGetWithHttpInfo($project_id, $id)
    {
        $returnType = '\Swagger\Client\Model\Styleguide';
        $request = $this->projectsProjectIdStyleguidesIdGetRequest($project_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Styleguide', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdStyleguidesIdGetAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdStyleguidesIdGetAsync($project_id, $id)
    {
        return $this->projectsProjectIdStyleguidesIdGetAsyncWithHttpInfo($project_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdStyleguidesIdGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdStyleguidesIdGetAsyncWithHttpInfo($project_id, $id)
    {
        $returnType = '\Swagger\Client\Model\Styleguide';
        $request = $this->projectsProjectIdStyleguidesIdGetRequest($project_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdStyleguidesIdGet'
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdStyleguidesIdGetRequest($project_id, $id)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdStyleguidesIdGet');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdStyleguidesIdGet');
        }

        $resourcePath = '/projects/{ProjectId}/styleguides/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdStyleguidesIdPatch
     *
     * @param string $title  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param string $audience  (optional)
     * @param string $target_audience  (optional)
     * @param string $grammatical_person  (optional)
     * @param string $vocabulary_type  (optional)
     * @param string $business  (optional)
     * @param string $company_branding  (optional)
     * @param string $formatting  (optional)
     * @param string $glossary_terms  (optional)
     * @param string $grammar_consistency  (optional)
     * @param string $literal_translation  (optional)
     * @param string $overall_tone  (optional)
     * @param string $samples  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\StyleguideDetails
     */
    public function projectsProjectIdStyleguidesIdPatch($title, $project_id, $id, $audience = null, $target_audience = null, $grammatical_person = null, $vocabulary_type = null, $business = null, $company_branding = null, $formatting = null, $glossary_terms = null, $grammar_consistency = null, $literal_translation = null, $overall_tone = null, $samples = null)
    {
        list($response) = $this->projectsProjectIdStyleguidesIdPatchWithHttpInfo($title, $project_id, $id, $audience, $target_audience, $grammatical_person, $vocabulary_type, $business, $company_branding, $formatting, $glossary_terms, $grammar_consistency, $literal_translation, $overall_tone, $samples);
        return $response;
    }

    /**
     * Operation projectsProjectIdStyleguidesIdPatchWithHttpInfo
     *
     * @param string $title  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param string $audience  (optional)
     * @param string $target_audience  (optional)
     * @param string $grammatical_person  (optional)
     * @param string $vocabulary_type  (optional)
     * @param string $business  (optional)
     * @param string $company_branding  (optional)
     * @param string $formatting  (optional)
     * @param string $glossary_terms  (optional)
     * @param string $grammar_consistency  (optional)
     * @param string $literal_translation  (optional)
     * @param string $overall_tone  (optional)
     * @param string $samples  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\StyleguideDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdStyleguidesIdPatchWithHttpInfo($title, $project_id, $id, $audience = null, $target_audience = null, $grammatical_person = null, $vocabulary_type = null, $business = null, $company_branding = null, $formatting = null, $glossary_terms = null, $grammar_consistency = null, $literal_translation = null, $overall_tone = null, $samples = null)
    {
        $returnType = '\Swagger\Client\Model\StyleguideDetails';
        $request = $this->projectsProjectIdStyleguidesIdPatchRequest($title, $project_id, $id, $audience, $target_audience, $grammatical_person, $vocabulary_type, $business, $company_branding, $formatting, $glossary_terms, $grammar_consistency, $literal_translation, $overall_tone, $samples);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\StyleguideDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdStyleguidesIdPatchAsync
     *
     * 
     *
     * @param string $title  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param string $audience  (optional)
     * @param string $target_audience  (optional)
     * @param string $grammatical_person  (optional)
     * @param string $vocabulary_type  (optional)
     * @param string $business  (optional)
     * @param string $company_branding  (optional)
     * @param string $formatting  (optional)
     * @param string $glossary_terms  (optional)
     * @param string $grammar_consistency  (optional)
     * @param string $literal_translation  (optional)
     * @param string $overall_tone  (optional)
     * @param string $samples  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdStyleguidesIdPatchAsync($title, $project_id, $id, $audience = null, $target_audience = null, $grammatical_person = null, $vocabulary_type = null, $business = null, $company_branding = null, $formatting = null, $glossary_terms = null, $grammar_consistency = null, $literal_translation = null, $overall_tone = null, $samples = null)
    {
        return $this->projectsProjectIdStyleguidesIdPatchAsyncWithHttpInfo($title, $project_id, $id, $audience, $target_audience, $grammatical_person, $vocabulary_type, $business, $company_branding, $formatting, $glossary_terms, $grammar_consistency, $literal_translation, $overall_tone, $samples)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdStyleguidesIdPatchAsyncWithHttpInfo
     *
     * 
     *
     * @param string $title  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param string $audience  (optional)
     * @param string $target_audience  (optional)
     * @param string $grammatical_person  (optional)
     * @param string $vocabulary_type  (optional)
     * @param string $business  (optional)
     * @param string $company_branding  (optional)
     * @param string $formatting  (optional)
     * @param string $glossary_terms  (optional)
     * @param string $grammar_consistency  (optional)
     * @param string $literal_translation  (optional)
     * @param string $overall_tone  (optional)
     * @param string $samples  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdStyleguidesIdPatchAsyncWithHttpInfo($title, $project_id, $id, $audience = null, $target_audience = null, $grammatical_person = null, $vocabulary_type = null, $business = null, $company_branding = null, $formatting = null, $glossary_terms = null, $grammar_consistency = null, $literal_translation = null, $overall_tone = null, $samples = null)
    {
        $returnType = '\Swagger\Client\Model\StyleguideDetails';
        $request = $this->projectsProjectIdStyleguidesIdPatchRequest($title, $project_id, $id, $audience, $target_audience, $grammatical_person, $vocabulary_type, $business, $company_branding, $formatting, $glossary_terms, $grammar_consistency, $literal_translation, $overall_tone, $samples);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdStyleguidesIdPatch'
     *
     * @param string $title  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param string $audience  (optional)
     * @param string $target_audience  (optional)
     * @param string $grammatical_person  (optional)
     * @param string $vocabulary_type  (optional)
     * @param string $business  (optional)
     * @param string $company_branding  (optional)
     * @param string $formatting  (optional)
     * @param string $glossary_terms  (optional)
     * @param string $grammar_consistency  (optional)
     * @param string $literal_translation  (optional)
     * @param string $overall_tone  (optional)
     * @param string $samples  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdStyleguidesIdPatchRequest($title, $project_id, $id, $audience = null, $target_audience = null, $grammatical_person = null, $vocabulary_type = null, $business = null, $company_branding = null, $formatting = null, $glossary_terms = null, $grammar_consistency = null, $literal_translation = null, $overall_tone = null, $samples = null)
    {
        // verify the required parameter 'title' is set
        if ($title === null) {
            throw new \InvalidArgumentException('Missing the required parameter $title when calling projectsProjectIdStyleguidesIdPatch');
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdStyleguidesIdPatch');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdStyleguidesIdPatch');
        }

        $resourcePath = '/projects/{ProjectId}/styleguides/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($title !== null) {
            $queryParams['title'] = ObjectSerializer::toQueryValue($title);
        }
        // query params
        if ($audience !== null) {
            $queryParams['audience'] = ObjectSerializer::toQueryValue($audience);
        }
        // query params
        if ($target_audience !== null) {
            $queryParams['target_audience'] = ObjectSerializer::toQueryValue($target_audience);
        }
        // query params
        if ($grammatical_person !== null) {
            $queryParams['grammatical_person'] = ObjectSerializer::toQueryValue($grammatical_person);
        }
        // query params
        if ($vocabulary_type !== null) {
            $queryParams['vocabulary_type'] = ObjectSerializer::toQueryValue($vocabulary_type);
        }
        // query params
        if ($business !== null) {
            $queryParams['business'] = ObjectSerializer::toQueryValue($business);
        }
        // query params
        if ($company_branding !== null) {
            $queryParams['company_branding'] = ObjectSerializer::toQueryValue($company_branding);
        }
        // query params
        if ($formatting !== null) {
            $queryParams['formatting'] = ObjectSerializer::toQueryValue($formatting);
        }
        // query params
        if ($glossary_terms !== null) {
            $queryParams['glossary_terms'] = ObjectSerializer::toQueryValue($glossary_terms);
        }
        // query params
        if ($grammar_consistency !== null) {
            $queryParams['grammar_consistency'] = ObjectSerializer::toQueryValue($grammar_consistency);
        }
        // query params
        if ($literal_translation !== null) {
            $queryParams['literal_translation'] = ObjectSerializer::toQueryValue($literal_translation);
        }
        // query params
        if ($overall_tone !== null) {
            $queryParams['overall_tone'] = ObjectSerializer::toQueryValue($overall_tone);
        }
        // query params
        if ($samples !== null) {
            $queryParams['samples'] = ObjectSerializer::toQueryValue($samples);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdStyleguidesPost
     *
     * @param string $title  (required)
     * @param string $project_id ProjectId (required)
     * @param string $audience  (optional)
     * @param string $target_audience  (optional)
     * @param string $grammatical_person  (optional)
     * @param string $vocabulary_type  (optional)
     * @param string $business  (optional)
     * @param string $company_branding  (optional)
     * @param string $formatting  (optional)
     * @param string $glossary_terms  (optional)
     * @param string $grammar_consistency  (optional)
     * @param string $literal_translation  (optional)
     * @param string $overall_tone  (optional)
     * @param string $samples  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\StyleguideDetails
     */
    public function projectsProjectIdStyleguidesPost($title, $project_id, $audience = null, $target_audience = null, $grammatical_person = null, $vocabulary_type = null, $business = null, $company_branding = null, $formatting = null, $glossary_terms = null, $grammar_consistency = null, $literal_translation = null, $overall_tone = null, $samples = null)
    {
        list($response) = $this->projectsProjectIdStyleguidesPostWithHttpInfo($title, $project_id, $audience, $target_audience, $grammatical_person, $vocabulary_type, $business, $company_branding, $formatting, $glossary_terms, $grammar_consistency, $literal_translation, $overall_tone, $samples);
        return $response;
    }

    /**
     * Operation projectsProjectIdStyleguidesPostWithHttpInfo
     *
     * @param string $title  (required)
     * @param string $project_id ProjectId (required)
     * @param string $audience  (optional)
     * @param string $target_audience  (optional)
     * @param string $grammatical_person  (optional)
     * @param string $vocabulary_type  (optional)
     * @param string $business  (optional)
     * @param string $company_branding  (optional)
     * @param string $formatting  (optional)
     * @param string $glossary_terms  (optional)
     * @param string $grammar_consistency  (optional)
     * @param string $literal_translation  (optional)
     * @param string $overall_tone  (optional)
     * @param string $samples  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\StyleguideDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdStyleguidesPostWithHttpInfo($title, $project_id, $audience = null, $target_audience = null, $grammatical_person = null, $vocabulary_type = null, $business = null, $company_branding = null, $formatting = null, $glossary_terms = null, $grammar_consistency = null, $literal_translation = null, $overall_tone = null, $samples = null)
    {
        $returnType = '\Swagger\Client\Model\StyleguideDetails';
        $request = $this->projectsProjectIdStyleguidesPostRequest($title, $project_id, $audience, $target_audience, $grammatical_person, $vocabulary_type, $business, $company_branding, $formatting, $glossary_terms, $grammar_consistency, $literal_translation, $overall_tone, $samples);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\StyleguideDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdStyleguidesPostAsync
     *
     * 
     *
     * @param string $title  (required)
     * @param string $project_id ProjectId (required)
     * @param string $audience  (optional)
     * @param string $target_audience  (optional)
     * @param string $grammatical_person  (optional)
     * @param string $vocabulary_type  (optional)
     * @param string $business  (optional)
     * @param string $company_branding  (optional)
     * @param string $formatting  (optional)
     * @param string $glossary_terms  (optional)
     * @param string $grammar_consistency  (optional)
     * @param string $literal_translation  (optional)
     * @param string $overall_tone  (optional)
     * @param string $samples  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdStyleguidesPostAsync($title, $project_id, $audience = null, $target_audience = null, $grammatical_person = null, $vocabulary_type = null, $business = null, $company_branding = null, $formatting = null, $glossary_terms = null, $grammar_consistency = null, $literal_translation = null, $overall_tone = null, $samples = null)
    {
        return $this->projectsProjectIdStyleguidesPostAsyncWithHttpInfo($title, $project_id, $audience, $target_audience, $grammatical_person, $vocabulary_type, $business, $company_branding, $formatting, $glossary_terms, $grammar_consistency, $literal_translation, $overall_tone, $samples)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdStyleguidesPostAsyncWithHttpInfo
     *
     * 
     *
     * @param string $title  (required)
     * @param string $project_id ProjectId (required)
     * @param string $audience  (optional)
     * @param string $target_audience  (optional)
     * @param string $grammatical_person  (optional)
     * @param string $vocabulary_type  (optional)
     * @param string $business  (optional)
     * @param string $company_branding  (optional)
     * @param string $formatting  (optional)
     * @param string $glossary_terms  (optional)
     * @param string $grammar_consistency  (optional)
     * @param string $literal_translation  (optional)
     * @param string $overall_tone  (optional)
     * @param string $samples  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdStyleguidesPostAsyncWithHttpInfo($title, $project_id, $audience = null, $target_audience = null, $grammatical_person = null, $vocabulary_type = null, $business = null, $company_branding = null, $formatting = null, $glossary_terms = null, $grammar_consistency = null, $literal_translation = null, $overall_tone = null, $samples = null)
    {
        $returnType = '\Swagger\Client\Model\StyleguideDetails';
        $request = $this->projectsProjectIdStyleguidesPostRequest($title, $project_id, $audience, $target_audience, $grammatical_person, $vocabulary_type, $business, $company_branding, $formatting, $glossary_terms, $grammar_consistency, $literal_translation, $overall_tone, $samples);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdStyleguidesPost'
     *
     * @param string $title  (required)
     * @param string $project_id ProjectId (required)
     * @param string $audience  (optional)
     * @param string $target_audience  (optional)
     * @param string $grammatical_person  (optional)
     * @param string $vocabulary_type  (optional)
     * @param string $business  (optional)
     * @param string $company_branding  (optional)
     * @param string $formatting  (optional)
     * @param string $glossary_terms  (optional)
     * @param string $grammar_consistency  (optional)
     * @param string $literal_translation  (optional)
     * @param string $overall_tone  (optional)
     * @param string $samples  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdStyleguidesPostRequest($title, $project_id, $audience = null, $target_audience = null, $grammatical_person = null, $vocabulary_type = null, $business = null, $company_branding = null, $formatting = null, $glossary_terms = null, $grammar_consistency = null, $literal_translation = null, $overall_tone = null, $samples = null)
    {
        // verify the required parameter 'title' is set
        if ($title === null) {
            throw new \InvalidArgumentException('Missing the required parameter $title when calling projectsProjectIdStyleguidesPost');
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdStyleguidesPost');
        }

        $resourcePath = '/projects/{ProjectId}/styleguides';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($title !== null) {
            $queryParams['title'] = ObjectSerializer::toQueryValue($title);
        }
        // query params
        if ($audience !== null) {
            $queryParams['audience'] = ObjectSerializer::toQueryValue($audience);
        }
        // query params
        if ($target_audience !== null) {
            $queryParams['target_audience'] = ObjectSerializer::toQueryValue($target_audience);
        }
        // query params
        if ($grammatical_person !== null) {
            $queryParams['grammatical_person'] = ObjectSerializer::toQueryValue($grammatical_person);
        }
        // query params
        if ($vocabulary_type !== null) {
            $queryParams['vocabulary_type'] = ObjectSerializer::toQueryValue($vocabulary_type);
        }
        // query params
        if ($business !== null) {
            $queryParams['business'] = ObjectSerializer::toQueryValue($business);
        }
        // query params
        if ($company_branding !== null) {
            $queryParams['company_branding'] = ObjectSerializer::toQueryValue($company_branding);
        }
        // query params
        if ($formatting !== null) {
            $queryParams['formatting'] = ObjectSerializer::toQueryValue($formatting);
        }
        // query params
        if ($glossary_terms !== null) {
            $queryParams['glossary_terms'] = ObjectSerializer::toQueryValue($glossary_terms);
        }
        // query params
        if ($grammar_consistency !== null) {
            $queryParams['grammar_consistency'] = ObjectSerializer::toQueryValue($grammar_consistency);
        }
        // query params
        if ($literal_translation !== null) {
            $queryParams['literal_translation'] = ObjectSerializer::toQueryValue($literal_translation);
        }
        // query params
        if ($overall_tone !== null) {
            $queryParams['overall_tone'] = ObjectSerializer::toQueryValue($overall_tone);
        }
        // query params
        if ($samples !== null) {
            $queryParams['samples'] = ObjectSerializer::toQueryValue($samples);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdTagsGet
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Tag[]
     */
    public function projectsProjectIdTagsGet($project_id, $per_page = '25', $page = '1')
    {
        list($response) = $this->projectsProjectIdTagsGetWithHttpInfo($project_id, $per_page, $page);
        return $response;
    }

    /**
     * Operation projectsProjectIdTagsGetWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Tag[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdTagsGetWithHttpInfo($project_id, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Tag[]';
        $request = $this->projectsProjectIdTagsGetRequest($project_id, $per_page, $page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Tag[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdTagsGetAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTagsGetAsync($project_id, $per_page = '25', $page = '1')
    {
        return $this->projectsProjectIdTagsGetAsyncWithHttpInfo($project_id, $per_page, $page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdTagsGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTagsGetAsyncWithHttpInfo($project_id, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Tag[]';
        $request = $this->projectsProjectIdTagsGetRequest($project_id, $per_page, $page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdTagsGet'
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdTagsGetRequest($project_id, $per_page = '25', $page = '1')
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdTagsGet');
        }

        $resourcePath = '/projects/{ProjectId}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdTagsNameDelete
     *
     * @param string $project_id ProjectId (required)
     * @param string $name Name (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function projectsProjectIdTagsNameDelete($project_id, $name)
    {
        $this->projectsProjectIdTagsNameDeleteWithHttpInfo($project_id, $name);
    }

    /**
     * Operation projectsProjectIdTagsNameDeleteWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $name Name (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdTagsNameDeleteWithHttpInfo($project_id, $name)
    {
        $returnType = '';
        $request = $this->projectsProjectIdTagsNameDeleteRequest($project_id, $name);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdTagsNameDeleteAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $name Name (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTagsNameDeleteAsync($project_id, $name)
    {
        return $this->projectsProjectIdTagsNameDeleteAsyncWithHttpInfo($project_id, $name)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdTagsNameDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $name Name (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTagsNameDeleteAsyncWithHttpInfo($project_id, $name)
    {
        $returnType = '';
        $request = $this->projectsProjectIdTagsNameDeleteRequest($project_id, $name);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdTagsNameDelete'
     *
     * @param string $project_id ProjectId (required)
     * @param string $name Name (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdTagsNameDeleteRequest($project_id, $name)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdTagsNameDelete');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling projectsProjectIdTagsNameDelete');
        }

        $resourcePath = '/projects/{ProjectId}/tags/{Name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'Name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdTagsNameGet
     *
     * @param string $project_id ProjectId (required)
     * @param string $name Name (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Tag
     */
    public function projectsProjectIdTagsNameGet($project_id, $name)
    {
        list($response) = $this->projectsProjectIdTagsNameGetWithHttpInfo($project_id, $name);
        return $response;
    }

    /**
     * Operation projectsProjectIdTagsNameGetWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $name Name (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Tag, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdTagsNameGetWithHttpInfo($project_id, $name)
    {
        $returnType = '\Swagger\Client\Model\Tag';
        $request = $this->projectsProjectIdTagsNameGetRequest($project_id, $name);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Tag', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdTagsNameGetAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $name Name (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTagsNameGetAsync($project_id, $name)
    {
        return $this->projectsProjectIdTagsNameGetAsyncWithHttpInfo($project_id, $name)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdTagsNameGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $name Name (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTagsNameGetAsyncWithHttpInfo($project_id, $name)
    {
        $returnType = '\Swagger\Client\Model\Tag';
        $request = $this->projectsProjectIdTagsNameGetRequest($project_id, $name);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdTagsNameGet'
     *
     * @param string $project_id ProjectId (required)
     * @param string $name Name (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdTagsNameGetRequest($project_id, $name)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdTagsNameGet');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling projectsProjectIdTagsNameGet');
        }

        $resourcePath = '/projects/{ProjectId}/tags/{Name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace('{' . 'Name' . '}', ObjectSerializer::toPathValue($name), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdTagsPost
     *
     * @param string $name  (required)
     * @param string $project_id ProjectId (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TagWithStats
     */
    public function projectsProjectIdTagsPost($name, $project_id)
    {
        list($response) = $this->projectsProjectIdTagsPostWithHttpInfo($name, $project_id);
        return $response;
    }

    /**
     * Operation projectsProjectIdTagsPostWithHttpInfo
     *
     * @param string $name  (required)
     * @param string $project_id ProjectId (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TagWithStats, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdTagsPostWithHttpInfo($name, $project_id)
    {
        $returnType = '\Swagger\Client\Model\TagWithStats';
        $request = $this->projectsProjectIdTagsPostRequest($name, $project_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\TagWithStats', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdTagsPostAsync
     *
     * 
     *
     * @param string $name  (required)
     * @param string $project_id ProjectId (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTagsPostAsync($name, $project_id)
    {
        return $this->projectsProjectIdTagsPostAsyncWithHttpInfo($name, $project_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdTagsPostAsyncWithHttpInfo
     *
     * 
     *
     * @param string $name  (required)
     * @param string $project_id ProjectId (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTagsPostAsyncWithHttpInfo($name, $project_id)
    {
        $returnType = '\Swagger\Client\Model\TagWithStats';
        $request = $this->projectsProjectIdTagsPostRequest($name, $project_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdTagsPost'
     *
     * @param string $name  (required)
     * @param string $project_id ProjectId (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdTagsPostRequest($name, $project_id)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling projectsProjectIdTagsPost');
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdTagsPost');
        }

        $resourcePath = '/projects/{ProjectId}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdTranslationsExcludePatch
     *
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AffectedCount
     */
    public function projectsProjectIdTranslationsExcludePatch($project_id, $q = null, $sort = null, $order = null)
    {
        list($response) = $this->projectsProjectIdTranslationsExcludePatchWithHttpInfo($project_id, $q, $sort, $order);
        return $response;
    }

    /**
     * Operation projectsProjectIdTranslationsExcludePatchWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AffectedCount, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdTranslationsExcludePatchWithHttpInfo($project_id, $q = null, $sort = null, $order = null)
    {
        $returnType = '\Swagger\Client\Model\AffectedCount';
        $request = $this->projectsProjectIdTranslationsExcludePatchRequest($project_id, $q, $sort, $order);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\AffectedCount', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdTranslationsExcludePatchAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTranslationsExcludePatchAsync($project_id, $q = null, $sort = null, $order = null)
    {
        return $this->projectsProjectIdTranslationsExcludePatchAsyncWithHttpInfo($project_id, $q, $sort, $order)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdTranslationsExcludePatchAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTranslationsExcludePatchAsyncWithHttpInfo($project_id, $q = null, $sort = null, $order = null)
    {
        $returnType = '\Swagger\Client\Model\AffectedCount';
        $request = $this->projectsProjectIdTranslationsExcludePatchRequest($project_id, $q, $sort, $order);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdTranslationsExcludePatch'
     *
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdTranslationsExcludePatchRequest($project_id, $q = null, $sort = null, $order = null)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdTranslationsExcludePatch');
        }

        $resourcePath = '/projects/{ProjectId}/translations/exclude';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdTranslationsGet
     *
     * @param string $project_id ProjectId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Translation[]
     */
    public function projectsProjectIdTranslationsGet($project_id, $sort = null, $order = null, $q = null, $per_page = '25', $page = '1')
    {
        list($response) = $this->projectsProjectIdTranslationsGetWithHttpInfo($project_id, $sort, $order, $q, $per_page, $page);
        return $response;
    }

    /**
     * Operation projectsProjectIdTranslationsGetWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Translation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdTranslationsGetWithHttpInfo($project_id, $sort = null, $order = null, $q = null, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Translation[]';
        $request = $this->projectsProjectIdTranslationsGetRequest($project_id, $sort, $order, $q, $per_page, $page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Translation[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdTranslationsGetAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTranslationsGetAsync($project_id, $sort = null, $order = null, $q = null, $per_page = '25', $page = '1')
    {
        return $this->projectsProjectIdTranslationsGetAsyncWithHttpInfo($project_id, $sort, $order, $q, $per_page, $page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdTranslationsGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTranslationsGetAsyncWithHttpInfo($project_id, $sort = null, $order = null, $q = null, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Translation[]';
        $request = $this->projectsProjectIdTranslationsGetRequest($project_id, $sort, $order, $q, $per_page, $page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdTranslationsGet'
     *
     * @param string $project_id ProjectId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdTranslationsGetRequest($project_id, $sort = null, $order = null, $q = null, $per_page = '25', $page = '1')
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdTranslationsGet');
        }

        $resourcePath = '/projects/{ProjectId}/translations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdTranslationsIdGet
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Translation
     */
    public function projectsProjectIdTranslationsIdGet($project_id, $id)
    {
        list($response) = $this->projectsProjectIdTranslationsIdGetWithHttpInfo($project_id, $id);
        return $response;
    }

    /**
     * Operation projectsProjectIdTranslationsIdGetWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Translation, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdTranslationsIdGetWithHttpInfo($project_id, $id)
    {
        $returnType = '\Swagger\Client\Model\Translation';
        $request = $this->projectsProjectIdTranslationsIdGetRequest($project_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Translation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdTranslationsIdGetAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTranslationsIdGetAsync($project_id, $id)
    {
        return $this->projectsProjectIdTranslationsIdGetAsyncWithHttpInfo($project_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdTranslationsIdGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTranslationsIdGetAsyncWithHttpInfo($project_id, $id)
    {
        $returnType = '\Swagger\Client\Model\Translation';
        $request = $this->projectsProjectIdTranslationsIdGetRequest($project_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdTranslationsIdGet'
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdTranslationsIdGetRequest($project_id, $id)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdTranslationsIdGet');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdTranslationsIdGet');
        }

        $resourcePath = '/projects/{ProjectId}/translations/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdTranslationsIdPatch
     *
     * @param string $content  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param string $plural_suffix  (optional)
     * @param bool $unverified  (optional)
     * @param bool $excluded  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TranslationDetails
     */
    public function projectsProjectIdTranslationsIdPatch($content, $project_id, $id, $plural_suffix = null, $unverified = null, $excluded = null)
    {
        list($response) = $this->projectsProjectIdTranslationsIdPatchWithHttpInfo($content, $project_id, $id, $plural_suffix, $unverified, $excluded);
        return $response;
    }

    /**
     * Operation projectsProjectIdTranslationsIdPatchWithHttpInfo
     *
     * @param string $content  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param string $plural_suffix  (optional)
     * @param bool $unverified  (optional)
     * @param bool $excluded  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TranslationDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdTranslationsIdPatchWithHttpInfo($content, $project_id, $id, $plural_suffix = null, $unverified = null, $excluded = null)
    {
        $returnType = '\Swagger\Client\Model\TranslationDetails';
        $request = $this->projectsProjectIdTranslationsIdPatchRequest($content, $project_id, $id, $plural_suffix, $unverified, $excluded);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\TranslationDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdTranslationsIdPatchAsync
     *
     * 
     *
     * @param string $content  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param string $plural_suffix  (optional)
     * @param bool $unverified  (optional)
     * @param bool $excluded  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTranslationsIdPatchAsync($content, $project_id, $id, $plural_suffix = null, $unverified = null, $excluded = null)
    {
        return $this->projectsProjectIdTranslationsIdPatchAsyncWithHttpInfo($content, $project_id, $id, $plural_suffix, $unverified, $excluded)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdTranslationsIdPatchAsyncWithHttpInfo
     *
     * 
     *
     * @param string $content  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param string $plural_suffix  (optional)
     * @param bool $unverified  (optional)
     * @param bool $excluded  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTranslationsIdPatchAsyncWithHttpInfo($content, $project_id, $id, $plural_suffix = null, $unverified = null, $excluded = null)
    {
        $returnType = '\Swagger\Client\Model\TranslationDetails';
        $request = $this->projectsProjectIdTranslationsIdPatchRequest($content, $project_id, $id, $plural_suffix, $unverified, $excluded);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdTranslationsIdPatch'
     *
     * @param string $content  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param string $plural_suffix  (optional)
     * @param bool $unverified  (optional)
     * @param bool $excluded  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdTranslationsIdPatchRequest($content, $project_id, $id, $plural_suffix = null, $unverified = null, $excluded = null)
    {
        // verify the required parameter 'content' is set
        if ($content === null) {
            throw new \InvalidArgumentException('Missing the required parameter $content when calling projectsProjectIdTranslationsIdPatch');
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdTranslationsIdPatch');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdTranslationsIdPatch');
        }

        $resourcePath = '/projects/{ProjectId}/translations/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($content !== null) {
            $queryParams['content'] = ObjectSerializer::toQueryValue($content);
        }
        // query params
        if ($plural_suffix !== null) {
            $queryParams['plural_suffix'] = ObjectSerializer::toQueryValue($plural_suffix);
        }
        // query params
        if ($unverified !== null) {
            $queryParams['unverified'] = ObjectSerializer::toQueryValue($unverified);
        }
        // query params
        if ($excluded !== null) {
            $queryParams['excluded'] = ObjectSerializer::toQueryValue($excluded);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdTranslationsIncludePatch
     *
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AffectedCount
     */
    public function projectsProjectIdTranslationsIncludePatch($project_id, $q = null, $sort = null, $order = null)
    {
        list($response) = $this->projectsProjectIdTranslationsIncludePatchWithHttpInfo($project_id, $q, $sort, $order);
        return $response;
    }

    /**
     * Operation projectsProjectIdTranslationsIncludePatchWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AffectedCount, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdTranslationsIncludePatchWithHttpInfo($project_id, $q = null, $sort = null, $order = null)
    {
        $returnType = '\Swagger\Client\Model\AffectedCount';
        $request = $this->projectsProjectIdTranslationsIncludePatchRequest($project_id, $q, $sort, $order);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\AffectedCount', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdTranslationsIncludePatchAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTranslationsIncludePatchAsync($project_id, $q = null, $sort = null, $order = null)
    {
        return $this->projectsProjectIdTranslationsIncludePatchAsyncWithHttpInfo($project_id, $q, $sort, $order)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdTranslationsIncludePatchAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTranslationsIncludePatchAsyncWithHttpInfo($project_id, $q = null, $sort = null, $order = null)
    {
        $returnType = '\Swagger\Client\Model\AffectedCount';
        $request = $this->projectsProjectIdTranslationsIncludePatchRequest($project_id, $q, $sort, $order);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdTranslationsIncludePatch'
     *
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdTranslationsIncludePatchRequest($project_id, $q = null, $sort = null, $order = null)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdTranslationsIncludePatch');
        }

        $resourcePath = '/projects/{ProjectId}/translations/include';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdTranslationsPost
     *
     * @param string $locale_id  (required)
     * @param string $key_id  (required)
     * @param string $content  (required)
     * @param string $project_id ProjectId (required)
     * @param string $plural_suffix  (optional)
     * @param bool $unverified  (optional)
     * @param bool $excluded  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TranslationDetails
     */
    public function projectsProjectIdTranslationsPost($locale_id, $key_id, $content, $project_id, $plural_suffix = null, $unverified = null, $excluded = null)
    {
        list($response) = $this->projectsProjectIdTranslationsPostWithHttpInfo($locale_id, $key_id, $content, $project_id, $plural_suffix, $unverified, $excluded);
        return $response;
    }

    /**
     * Operation projectsProjectIdTranslationsPostWithHttpInfo
     *
     * @param string $locale_id  (required)
     * @param string $key_id  (required)
     * @param string $content  (required)
     * @param string $project_id ProjectId (required)
     * @param string $plural_suffix  (optional)
     * @param bool $unverified  (optional)
     * @param bool $excluded  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TranslationDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdTranslationsPostWithHttpInfo($locale_id, $key_id, $content, $project_id, $plural_suffix = null, $unverified = null, $excluded = null)
    {
        $returnType = '\Swagger\Client\Model\TranslationDetails';
        $request = $this->projectsProjectIdTranslationsPostRequest($locale_id, $key_id, $content, $project_id, $plural_suffix, $unverified, $excluded);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\TranslationDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdTranslationsPostAsync
     *
     * 
     *
     * @param string $locale_id  (required)
     * @param string $key_id  (required)
     * @param string $content  (required)
     * @param string $project_id ProjectId (required)
     * @param string $plural_suffix  (optional)
     * @param bool $unverified  (optional)
     * @param bool $excluded  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTranslationsPostAsync($locale_id, $key_id, $content, $project_id, $plural_suffix = null, $unverified = null, $excluded = null)
    {
        return $this->projectsProjectIdTranslationsPostAsyncWithHttpInfo($locale_id, $key_id, $content, $project_id, $plural_suffix, $unverified, $excluded)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdTranslationsPostAsyncWithHttpInfo
     *
     * 
     *
     * @param string $locale_id  (required)
     * @param string $key_id  (required)
     * @param string $content  (required)
     * @param string $project_id ProjectId (required)
     * @param string $plural_suffix  (optional)
     * @param bool $unverified  (optional)
     * @param bool $excluded  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTranslationsPostAsyncWithHttpInfo($locale_id, $key_id, $content, $project_id, $plural_suffix = null, $unverified = null, $excluded = null)
    {
        $returnType = '\Swagger\Client\Model\TranslationDetails';
        $request = $this->projectsProjectIdTranslationsPostRequest($locale_id, $key_id, $content, $project_id, $plural_suffix, $unverified, $excluded);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdTranslationsPost'
     *
     * @param string $locale_id  (required)
     * @param string $key_id  (required)
     * @param string $content  (required)
     * @param string $project_id ProjectId (required)
     * @param string $plural_suffix  (optional)
     * @param bool $unverified  (optional)
     * @param bool $excluded  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdTranslationsPostRequest($locale_id, $key_id, $content, $project_id, $plural_suffix = null, $unverified = null, $excluded = null)
    {
        // verify the required parameter 'locale_id' is set
        if ($locale_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $locale_id when calling projectsProjectIdTranslationsPost');
        }
        // verify the required parameter 'key_id' is set
        if ($key_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $key_id when calling projectsProjectIdTranslationsPost');
        }
        // verify the required parameter 'content' is set
        if ($content === null) {
            throw new \InvalidArgumentException('Missing the required parameter $content when calling projectsProjectIdTranslationsPost');
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdTranslationsPost');
        }

        $resourcePath = '/projects/{ProjectId}/translations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locale_id !== null) {
            $queryParams['locale_id'] = ObjectSerializer::toQueryValue($locale_id);
        }
        // query params
        if ($key_id !== null) {
            $queryParams['key_id'] = ObjectSerializer::toQueryValue($key_id);
        }
        // query params
        if ($content !== null) {
            $queryParams['content'] = ObjectSerializer::toQueryValue($content);
        }
        // query params
        if ($plural_suffix !== null) {
            $queryParams['plural_suffix'] = ObjectSerializer::toQueryValue($plural_suffix);
        }
        // query params
        if ($unverified !== null) {
            $queryParams['unverified'] = ObjectSerializer::toQueryValue($unverified);
        }
        // query params
        if ($excluded !== null) {
            $queryParams['excluded'] = ObjectSerializer::toQueryValue($excluded);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdTranslationsSearchPost
     *
     * @param string $project_id ProjectId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Translation[]
     */
    public function projectsProjectIdTranslationsSearchPost($project_id, $sort = null, $order = null, $q = null, $per_page = '25', $page = '1')
    {
        list($response) = $this->projectsProjectIdTranslationsSearchPostWithHttpInfo($project_id, $sort, $order, $q, $per_page, $page);
        return $response;
    }

    /**
     * Operation projectsProjectIdTranslationsSearchPostWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Translation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdTranslationsSearchPostWithHttpInfo($project_id, $sort = null, $order = null, $q = null, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Translation[]';
        $request = $this->projectsProjectIdTranslationsSearchPostRequest($project_id, $sort, $order, $q, $per_page, $page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Translation[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdTranslationsSearchPostAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTranslationsSearchPostAsync($project_id, $sort = null, $order = null, $q = null, $per_page = '25', $page = '1')
    {
        return $this->projectsProjectIdTranslationsSearchPostAsyncWithHttpInfo($project_id, $sort, $order, $q, $per_page, $page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdTranslationsSearchPostAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTranslationsSearchPostAsyncWithHttpInfo($project_id, $sort = null, $order = null, $q = null, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Translation[]';
        $request = $this->projectsProjectIdTranslationsSearchPostRequest($project_id, $sort, $order, $q, $per_page, $page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdTranslationsSearchPost'
     *
     * @param string $project_id ProjectId (required)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @param string $q  (optional)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdTranslationsSearchPostRequest($project_id, $sort = null, $order = null, $q = null, $per_page = '25', $page = '1')
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdTranslationsSearchPost');
        }

        $resourcePath = '/projects/{ProjectId}/translations/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdTranslationsTranslationIdVersionsGet
     *
     * @param string $project_id ProjectId (required)
     * @param string $translation_id TranslationId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TranslationVersion[]
     */
    public function projectsProjectIdTranslationsTranslationIdVersionsGet($project_id, $translation_id, $per_page = '25', $page = '1')
    {
        list($response) = $this->projectsProjectIdTranslationsTranslationIdVersionsGetWithHttpInfo($project_id, $translation_id, $per_page, $page);
        return $response;
    }

    /**
     * Operation projectsProjectIdTranslationsTranslationIdVersionsGetWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $translation_id TranslationId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TranslationVersion[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdTranslationsTranslationIdVersionsGetWithHttpInfo($project_id, $translation_id, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\TranslationVersion[]';
        $request = $this->projectsProjectIdTranslationsTranslationIdVersionsGetRequest($project_id, $translation_id, $per_page, $page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\TranslationVersion[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdTranslationsTranslationIdVersionsGetAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $translation_id TranslationId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTranslationsTranslationIdVersionsGetAsync($project_id, $translation_id, $per_page = '25', $page = '1')
    {
        return $this->projectsProjectIdTranslationsTranslationIdVersionsGetAsyncWithHttpInfo($project_id, $translation_id, $per_page, $page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdTranslationsTranslationIdVersionsGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $translation_id TranslationId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTranslationsTranslationIdVersionsGetAsyncWithHttpInfo($project_id, $translation_id, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\TranslationVersion[]';
        $request = $this->projectsProjectIdTranslationsTranslationIdVersionsGetRequest($project_id, $translation_id, $per_page, $page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdTranslationsTranslationIdVersionsGet'
     *
     * @param string $project_id ProjectId (required)
     * @param string $translation_id TranslationId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdTranslationsTranslationIdVersionsGetRequest($project_id, $translation_id, $per_page = '25', $page = '1')
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdTranslationsTranslationIdVersionsGet');
        }
        // verify the required parameter 'translation_id' is set
        if ($translation_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $translation_id when calling projectsProjectIdTranslationsTranslationIdVersionsGet');
        }

        $resourcePath = '/projects/{ProjectId}/translations/{TranslationId}/versions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($translation_id !== null) {
            $resourcePath = str_replace('{' . 'TranslationId' . '}', ObjectSerializer::toPathValue($translation_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdTranslationsTranslationIdVersionsIdGet
     *
     * @param string $project_id ProjectId (required)
     * @param string $translation_id TranslationId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TranslationVersion
     */
    public function projectsProjectIdTranslationsTranslationIdVersionsIdGet($project_id, $translation_id, $id)
    {
        list($response) = $this->projectsProjectIdTranslationsTranslationIdVersionsIdGetWithHttpInfo($project_id, $translation_id, $id);
        return $response;
    }

    /**
     * Operation projectsProjectIdTranslationsTranslationIdVersionsIdGetWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $translation_id TranslationId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TranslationVersion, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdTranslationsTranslationIdVersionsIdGetWithHttpInfo($project_id, $translation_id, $id)
    {
        $returnType = '\Swagger\Client\Model\TranslationVersion';
        $request = $this->projectsProjectIdTranslationsTranslationIdVersionsIdGetRequest($project_id, $translation_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\TranslationVersion', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdTranslationsTranslationIdVersionsIdGetAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $translation_id TranslationId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTranslationsTranslationIdVersionsIdGetAsync($project_id, $translation_id, $id)
    {
        return $this->projectsProjectIdTranslationsTranslationIdVersionsIdGetAsyncWithHttpInfo($project_id, $translation_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdTranslationsTranslationIdVersionsIdGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $translation_id TranslationId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTranslationsTranslationIdVersionsIdGetAsyncWithHttpInfo($project_id, $translation_id, $id)
    {
        $returnType = '\Swagger\Client\Model\TranslationVersion';
        $request = $this->projectsProjectIdTranslationsTranslationIdVersionsIdGetRequest($project_id, $translation_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdTranslationsTranslationIdVersionsIdGet'
     *
     * @param string $project_id ProjectId (required)
     * @param string $translation_id TranslationId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdTranslationsTranslationIdVersionsIdGetRequest($project_id, $translation_id, $id)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdTranslationsTranslationIdVersionsIdGet');
        }
        // verify the required parameter 'translation_id' is set
        if ($translation_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $translation_id when calling projectsProjectIdTranslationsTranslationIdVersionsIdGet');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdTranslationsTranslationIdVersionsIdGet');
        }

        $resourcePath = '/projects/{ProjectId}/translations/{TranslationId}/versions/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($translation_id !== null) {
            $resourcePath = str_replace('{' . 'TranslationId' . '}', ObjectSerializer::toPathValue($translation_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdTranslationsUnverifyPatch
     *
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AffectedCount
     */
    public function projectsProjectIdTranslationsUnverifyPatch($project_id, $q = null, $sort = null, $order = null)
    {
        list($response) = $this->projectsProjectIdTranslationsUnverifyPatchWithHttpInfo($project_id, $q, $sort, $order);
        return $response;
    }

    /**
     * Operation projectsProjectIdTranslationsUnverifyPatchWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AffectedCount, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdTranslationsUnverifyPatchWithHttpInfo($project_id, $q = null, $sort = null, $order = null)
    {
        $returnType = '\Swagger\Client\Model\AffectedCount';
        $request = $this->projectsProjectIdTranslationsUnverifyPatchRequest($project_id, $q, $sort, $order);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\AffectedCount', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdTranslationsUnverifyPatchAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTranslationsUnverifyPatchAsync($project_id, $q = null, $sort = null, $order = null)
    {
        return $this->projectsProjectIdTranslationsUnverifyPatchAsyncWithHttpInfo($project_id, $q, $sort, $order)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdTranslationsUnverifyPatchAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTranslationsUnverifyPatchAsyncWithHttpInfo($project_id, $q = null, $sort = null, $order = null)
    {
        $returnType = '\Swagger\Client\Model\AffectedCount';
        $request = $this->projectsProjectIdTranslationsUnverifyPatchRequest($project_id, $q, $sort, $order);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdTranslationsUnverifyPatch'
     *
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdTranslationsUnverifyPatchRequest($project_id, $q = null, $sort = null, $order = null)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdTranslationsUnverifyPatch');
        }

        $resourcePath = '/projects/{ProjectId}/translations/unverify';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdTranslationsVerifyPatch
     *
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AffectedCount
     */
    public function projectsProjectIdTranslationsVerifyPatch($project_id, $q = null, $sort = null, $order = null)
    {
        list($response) = $this->projectsProjectIdTranslationsVerifyPatchWithHttpInfo($project_id, $q, $sort, $order);
        return $response;
    }

    /**
     * Operation projectsProjectIdTranslationsVerifyPatchWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AffectedCount, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdTranslationsVerifyPatchWithHttpInfo($project_id, $q = null, $sort = null, $order = null)
    {
        $returnType = '\Swagger\Client\Model\AffectedCount';
        $request = $this->projectsProjectIdTranslationsVerifyPatchRequest($project_id, $q, $sort, $order);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\AffectedCount', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdTranslationsVerifyPatchAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTranslationsVerifyPatchAsync($project_id, $q = null, $sort = null, $order = null)
    {
        return $this->projectsProjectIdTranslationsVerifyPatchAsyncWithHttpInfo($project_id, $q, $sort, $order)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdTranslationsVerifyPatchAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdTranslationsVerifyPatchAsyncWithHttpInfo($project_id, $q = null, $sort = null, $order = null)
    {
        $returnType = '\Swagger\Client\Model\AffectedCount';
        $request = $this->projectsProjectIdTranslationsVerifyPatchRequest($project_id, $q, $sort, $order);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdTranslationsVerifyPatch'
     *
     * @param string $project_id ProjectId (required)
     * @param string $q  (optional)
     * @param string $sort  (optional)
     * @param string $order  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdTranslationsVerifyPatchRequest($project_id, $q = null, $sort = null, $order = null)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdTranslationsVerifyPatch');
        }

        $resourcePath = '/projects/{ProjectId}/translations/verify';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdUploadsGet
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Upload[]
     */
    public function projectsProjectIdUploadsGet($project_id, $per_page = '25', $page = '1')
    {
        list($response) = $this->projectsProjectIdUploadsGetWithHttpInfo($project_id, $per_page, $page);
        return $response;
    }

    /**
     * Operation projectsProjectIdUploadsGetWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Upload[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdUploadsGetWithHttpInfo($project_id, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Upload[]';
        $request = $this->projectsProjectIdUploadsGetRequest($project_id, $per_page, $page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Upload[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdUploadsGetAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdUploadsGetAsync($project_id, $per_page = '25', $page = '1')
    {
        return $this->projectsProjectIdUploadsGetAsyncWithHttpInfo($project_id, $per_page, $page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdUploadsGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdUploadsGetAsyncWithHttpInfo($project_id, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Upload[]';
        $request = $this->projectsProjectIdUploadsGetRequest($project_id, $per_page, $page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdUploadsGet'
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdUploadsGetRequest($project_id, $per_page = '25', $page = '1')
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdUploadsGet');
        }

        $resourcePath = '/projects/{ProjectId}/uploads';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdUploadsIdGet
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Upload
     */
    public function projectsProjectIdUploadsIdGet($project_id, $id)
    {
        list($response) = $this->projectsProjectIdUploadsIdGetWithHttpInfo($project_id, $id);
        return $response;
    }

    /**
     * Operation projectsProjectIdUploadsIdGetWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Upload, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdUploadsIdGetWithHttpInfo($project_id, $id)
    {
        $returnType = '\Swagger\Client\Model\Upload';
        $request = $this->projectsProjectIdUploadsIdGetRequest($project_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Upload', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdUploadsIdGetAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdUploadsIdGetAsync($project_id, $id)
    {
        return $this->projectsProjectIdUploadsIdGetAsyncWithHttpInfo($project_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdUploadsIdGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdUploadsIdGetAsyncWithHttpInfo($project_id, $id)
    {
        $returnType = '\Swagger\Client\Model\Upload';
        $request = $this->projectsProjectIdUploadsIdGetRequest($project_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdUploadsIdGet'
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdUploadsIdGetRequest($project_id, $id)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdUploadsIdGet');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdUploadsIdGet');
        }

        $resourcePath = '/projects/{ProjectId}/uploads/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdUploadsPost
     *
     * @param string $file  (required)
     * @param string $project_id ProjectId (required)
     * @param string $file_format  (optional)
     * @param string $locale_id  (optional)
     * @param string $tags  (optional)
     * @param bool $update_translations  (optional)
     * @param bool $update_descriptions  (optional)
     * @param bool $convert_emoji  (optional)
     * @param bool $skip_upload_tags  (optional)
     * @param bool $skip_unverification  (optional)
     * @param string $file_encoding  (optional)
     * @param string $format_options  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Upload
     */
    public function projectsProjectIdUploadsPost($file, $project_id, $file_format = null, $locale_id = null, $tags = null, $update_translations = null, $update_descriptions = null, $convert_emoji = null, $skip_upload_tags = null, $skip_unverification = null, $file_encoding = null, $format_options = null)
    {
        list($response) = $this->projectsProjectIdUploadsPostWithHttpInfo($file, $project_id, $file_format, $locale_id, $tags, $update_translations, $update_descriptions, $convert_emoji, $skip_upload_tags, $skip_unverification, $file_encoding, $format_options);
        return $response;
    }

    /**
     * Operation projectsProjectIdUploadsPostWithHttpInfo
     *
     * @param string $file  (required)
     * @param string $project_id ProjectId (required)
     * @param string $file_format  (optional)
     * @param string $locale_id  (optional)
     * @param string $tags  (optional)
     * @param bool $update_translations  (optional)
     * @param bool $update_descriptions  (optional)
     * @param bool $convert_emoji  (optional)
     * @param bool $skip_upload_tags  (optional)
     * @param bool $skip_unverification  (optional)
     * @param string $file_encoding  (optional)
     * @param string $format_options  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Upload, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdUploadsPostWithHttpInfo($file, $project_id, $file_format = null, $locale_id = null, $tags = null, $update_translations = null, $update_descriptions = null, $convert_emoji = null, $skip_upload_tags = null, $skip_unverification = null, $file_encoding = null, $format_options = null)
    {
        $returnType = '\Swagger\Client\Model\Upload';
        $request = $this->projectsProjectIdUploadsPostRequest($file, $project_id, $file_format, $locale_id, $tags, $update_translations, $update_descriptions, $convert_emoji, $skip_upload_tags, $skip_unverification, $file_encoding, $format_options);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Upload', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdUploadsPostAsync
     *
     * 
     *
     * @param string $file  (required)
     * @param string $project_id ProjectId (required)
     * @param string $file_format  (optional)
     * @param string $locale_id  (optional)
     * @param string $tags  (optional)
     * @param bool $update_translations  (optional)
     * @param bool $update_descriptions  (optional)
     * @param bool $convert_emoji  (optional)
     * @param bool $skip_upload_tags  (optional)
     * @param bool $skip_unverification  (optional)
     * @param string $file_encoding  (optional)
     * @param string $format_options  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdUploadsPostAsync($file, $project_id, $file_format = null, $locale_id = null, $tags = null, $update_translations = null, $update_descriptions = null, $convert_emoji = null, $skip_upload_tags = null, $skip_unverification = null, $file_encoding = null, $format_options = null)
    {
        return $this->projectsProjectIdUploadsPostAsyncWithHttpInfo($file, $project_id, $file_format, $locale_id, $tags, $update_translations, $update_descriptions, $convert_emoji, $skip_upload_tags, $skip_unverification, $file_encoding, $format_options)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdUploadsPostAsyncWithHttpInfo
     *
     * 
     *
     * @param string $file  (required)
     * @param string $project_id ProjectId (required)
     * @param string $file_format  (optional)
     * @param string $locale_id  (optional)
     * @param string $tags  (optional)
     * @param bool $update_translations  (optional)
     * @param bool $update_descriptions  (optional)
     * @param bool $convert_emoji  (optional)
     * @param bool $skip_upload_tags  (optional)
     * @param bool $skip_unverification  (optional)
     * @param string $file_encoding  (optional)
     * @param string $format_options  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdUploadsPostAsyncWithHttpInfo($file, $project_id, $file_format = null, $locale_id = null, $tags = null, $update_translations = null, $update_descriptions = null, $convert_emoji = null, $skip_upload_tags = null, $skip_unverification = null, $file_encoding = null, $format_options = null)
    {
        $returnType = '\Swagger\Client\Model\Upload';
        $request = $this->projectsProjectIdUploadsPostRequest($file, $project_id, $file_format, $locale_id, $tags, $update_translations, $update_descriptions, $convert_emoji, $skip_upload_tags, $skip_unverification, $file_encoding, $format_options);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdUploadsPost'
     *
     * @param string $file  (required)
     * @param string $project_id ProjectId (required)
     * @param string $file_format  (optional)
     * @param string $locale_id  (optional)
     * @param string $tags  (optional)
     * @param bool $update_translations  (optional)
     * @param bool $update_descriptions  (optional)
     * @param bool $convert_emoji  (optional)
     * @param bool $skip_upload_tags  (optional)
     * @param bool $skip_unverification  (optional)
     * @param string $file_encoding  (optional)
     * @param string $format_options  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdUploadsPostRequest($file, $project_id, $file_format = null, $locale_id = null, $tags = null, $update_translations = null, $update_descriptions = null, $convert_emoji = null, $skip_upload_tags = null, $skip_unverification = null, $file_encoding = null, $format_options = null)
    {
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file when calling projectsProjectIdUploadsPost');
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdUploadsPost');
        }

        $resourcePath = '/projects/{ProjectId}/uploads';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($file !== null) {
            $queryParams['file'] = ObjectSerializer::toQueryValue($file);
        }
        // query params
        if ($file_format !== null) {
            $queryParams['file_format'] = ObjectSerializer::toQueryValue($file_format);
        }
        // query params
        if ($locale_id !== null) {
            $queryParams['locale_id'] = ObjectSerializer::toQueryValue($locale_id);
        }
        // query params
        if ($tags !== null) {
            $queryParams['tags'] = ObjectSerializer::toQueryValue($tags);
        }
        // query params
        if ($update_translations !== null) {
            $queryParams['update_translations'] = ObjectSerializer::toQueryValue($update_translations);
        }
        // query params
        if ($update_descriptions !== null) {
            $queryParams['update_descriptions'] = ObjectSerializer::toQueryValue($update_descriptions);
        }
        // query params
        if ($convert_emoji !== null) {
            $queryParams['convert_emoji'] = ObjectSerializer::toQueryValue($convert_emoji);
        }
        // query params
        if ($skip_upload_tags !== null) {
            $queryParams['skip_upload_tags'] = ObjectSerializer::toQueryValue($skip_upload_tags);
        }
        // query params
        if ($skip_unverification !== null) {
            $queryParams['skip_unverification'] = ObjectSerializer::toQueryValue($skip_unverification);
        }
        // query params
        if ($file_encoding !== null) {
            $queryParams['file_encoding'] = ObjectSerializer::toQueryValue($file_encoding);
        }
        // query params
        if ($format_options !== null) {
            $queryParams['format_options'] = ObjectSerializer::toQueryValue($format_options);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdWebhooksGet
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Webhook[]
     */
    public function projectsProjectIdWebhooksGet($project_id, $per_page = '25', $page = '1')
    {
        list($response) = $this->projectsProjectIdWebhooksGetWithHttpInfo($project_id, $per_page, $page);
        return $response;
    }

    /**
     * Operation projectsProjectIdWebhooksGetWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Webhook[], HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdWebhooksGetWithHttpInfo($project_id, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Webhook[]';
        $request = $this->projectsProjectIdWebhooksGetRequest($project_id, $per_page, $page);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Webhook[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdWebhooksGetAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdWebhooksGetAsync($project_id, $per_page = '25', $page = '1')
    {
        return $this->projectsProjectIdWebhooksGetAsyncWithHttpInfo($project_id, $per_page, $page)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdWebhooksGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdWebhooksGetAsyncWithHttpInfo($project_id, $per_page = '25', $page = '1')
    {
        $returnType = '\Swagger\Client\Model\Webhook[]';
        $request = $this->projectsProjectIdWebhooksGetRequest($project_id, $per_page, $page);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdWebhooksGet'
     *
     * @param string $project_id ProjectId (required)
     * @param int $per_page Per Page (optional, default to 25)
     * @param int $page Page (optional, default to 1)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdWebhooksGetRequest($project_id, $per_page = '25', $page = '1')
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdWebhooksGet');
        }

        $resourcePath = '/projects/{ProjectId}/webhooks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdWebhooksIdDelete
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function projectsProjectIdWebhooksIdDelete($project_id, $id)
    {
        $this->projectsProjectIdWebhooksIdDeleteWithHttpInfo($project_id, $id);
    }

    /**
     * Operation projectsProjectIdWebhooksIdDeleteWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdWebhooksIdDeleteWithHttpInfo($project_id, $id)
    {
        $returnType = '';
        $request = $this->projectsProjectIdWebhooksIdDeleteRequest($project_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdWebhooksIdDeleteAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdWebhooksIdDeleteAsync($project_id, $id)
    {
        return $this->projectsProjectIdWebhooksIdDeleteAsyncWithHttpInfo($project_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdWebhooksIdDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdWebhooksIdDeleteAsyncWithHttpInfo($project_id, $id)
    {
        $returnType = '';
        $request = $this->projectsProjectIdWebhooksIdDeleteRequest($project_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdWebhooksIdDelete'
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdWebhooksIdDeleteRequest($project_id, $id)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdWebhooksIdDelete');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdWebhooksIdDelete');
        }

        $resourcePath = '/projects/{ProjectId}/webhooks/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdWebhooksIdGet
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Webhook
     */
    public function projectsProjectIdWebhooksIdGet($project_id, $id)
    {
        list($response) = $this->projectsProjectIdWebhooksIdGetWithHttpInfo($project_id, $id);
        return $response;
    }

    /**
     * Operation projectsProjectIdWebhooksIdGetWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Webhook, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdWebhooksIdGetWithHttpInfo($project_id, $id)
    {
        $returnType = '\Swagger\Client\Model\Webhook';
        $request = $this->projectsProjectIdWebhooksIdGetRequest($project_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Webhook', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdWebhooksIdGetAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdWebhooksIdGetAsync($project_id, $id)
    {
        return $this->projectsProjectIdWebhooksIdGetAsyncWithHttpInfo($project_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdWebhooksIdGetAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdWebhooksIdGetAsyncWithHttpInfo($project_id, $id)
    {
        $returnType = '\Swagger\Client\Model\Webhook';
        $request = $this->projectsProjectIdWebhooksIdGetRequest($project_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdWebhooksIdGet'
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdWebhooksIdGetRequest($project_id, $id)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdWebhooksIdGet');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdWebhooksIdGet');
        }

        $resourcePath = '/projects/{ProjectId}/webhooks/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdWebhooksIdPatch
     *
     * @param string $callback_url  (required)
     * @param string $events  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param string $description  (optional)
     * @param bool $active  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Webhook
     */
    public function projectsProjectIdWebhooksIdPatch($callback_url, $events, $project_id, $id, $description = null, $active = null)
    {
        list($response) = $this->projectsProjectIdWebhooksIdPatchWithHttpInfo($callback_url, $events, $project_id, $id, $description, $active);
        return $response;
    }

    /**
     * Operation projectsProjectIdWebhooksIdPatchWithHttpInfo
     *
     * @param string $callback_url  (required)
     * @param string $events  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param string $description  (optional)
     * @param bool $active  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Webhook, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdWebhooksIdPatchWithHttpInfo($callback_url, $events, $project_id, $id, $description = null, $active = null)
    {
        $returnType = '\Swagger\Client\Model\Webhook';
        $request = $this->projectsProjectIdWebhooksIdPatchRequest($callback_url, $events, $project_id, $id, $description, $active);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Webhook', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdWebhooksIdPatchAsync
     *
     * 
     *
     * @param string $callback_url  (required)
     * @param string $events  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param string $description  (optional)
     * @param bool $active  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdWebhooksIdPatchAsync($callback_url, $events, $project_id, $id, $description = null, $active = null)
    {
        return $this->projectsProjectIdWebhooksIdPatchAsyncWithHttpInfo($callback_url, $events, $project_id, $id, $description, $active)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdWebhooksIdPatchAsyncWithHttpInfo
     *
     * 
     *
     * @param string $callback_url  (required)
     * @param string $events  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param string $description  (optional)
     * @param bool $active  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdWebhooksIdPatchAsyncWithHttpInfo($callback_url, $events, $project_id, $id, $description = null, $active = null)
    {
        $returnType = '\Swagger\Client\Model\Webhook';
        $request = $this->projectsProjectIdWebhooksIdPatchRequest($callback_url, $events, $project_id, $id, $description, $active);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdWebhooksIdPatch'
     *
     * @param string $callback_url  (required)
     * @param string $events  (required)
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @param string $description  (optional)
     * @param bool $active  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdWebhooksIdPatchRequest($callback_url, $events, $project_id, $id, $description = null, $active = null)
    {
        // verify the required parameter 'callback_url' is set
        if ($callback_url === null) {
            throw new \InvalidArgumentException('Missing the required parameter $callback_url when calling projectsProjectIdWebhooksIdPatch');
        }
        // verify the required parameter 'events' is set
        if ($events === null) {
            throw new \InvalidArgumentException('Missing the required parameter $events when calling projectsProjectIdWebhooksIdPatch');
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdWebhooksIdPatch');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdWebhooksIdPatch');
        }

        $resourcePath = '/projects/{ProjectId}/webhooks/{Id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($callback_url !== null) {
            $queryParams['callback_url'] = ObjectSerializer::toQueryValue($callback_url);
        }
        // query params
        if ($description !== null) {
            $queryParams['description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($events !== null) {
            $queryParams['events'] = ObjectSerializer::toQueryValue($events);
        }
        // query params
        if ($active !== null) {
            $queryParams['active'] = ObjectSerializer::toQueryValue($active);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PATCH',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdWebhooksIdTestPost
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function projectsProjectIdWebhooksIdTestPost($project_id, $id)
    {
        $this->projectsProjectIdWebhooksIdTestPostWithHttpInfo($project_id, $id);
    }

    /**
     * Operation projectsProjectIdWebhooksIdTestPostWithHttpInfo
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdWebhooksIdTestPostWithHttpInfo($project_id, $id)
    {
        $returnType = '';
        $request = $this->projectsProjectIdWebhooksIdTestPostRequest($project_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdWebhooksIdTestPostAsync
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdWebhooksIdTestPostAsync($project_id, $id)
    {
        return $this->projectsProjectIdWebhooksIdTestPostAsyncWithHttpInfo($project_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdWebhooksIdTestPostAsyncWithHttpInfo
     *
     * 
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdWebhooksIdTestPostAsyncWithHttpInfo($project_id, $id)
    {
        $returnType = '';
        $request = $this->projectsProjectIdWebhooksIdTestPostRequest($project_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            return [null, $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdWebhooksIdTestPost'
     *
     * @param string $project_id ProjectId (required)
     * @param string $id Id (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdWebhooksIdTestPostRequest($project_id, $id)
    {
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdWebhooksIdTestPost');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectsProjectIdWebhooksIdTestPost');
        }

        $resourcePath = '/projects/{ProjectId}/webhooks/{Id}/test';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'Id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectsProjectIdWebhooksPost
     *
     * @param string $callback_url  (required)
     * @param string $events  (required)
     * @param string $project_id ProjectId (required)
     * @param string $description  (optional)
     * @param bool $active  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Webhook
     */
    public function projectsProjectIdWebhooksPost($callback_url, $events, $project_id, $description = null, $active = null)
    {
        list($response) = $this->projectsProjectIdWebhooksPostWithHttpInfo($callback_url, $events, $project_id, $description, $active);
        return $response;
    }

    /**
     * Operation projectsProjectIdWebhooksPostWithHttpInfo
     *
     * @param string $callback_url  (required)
     * @param string $events  (required)
     * @param string $project_id ProjectId (required)
     * @param string $description  (optional)
     * @param bool $active  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Webhook, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectsProjectIdWebhooksPostWithHttpInfo($callback_url, $events, $project_id, $description = null, $active = null)
    {
        $returnType = '\Swagger\Client\Model\Webhook';
        $request = $this->projectsProjectIdWebhooksPostRequest($callback_url, $events, $project_id, $description, $active);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\Webhook', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation projectsProjectIdWebhooksPostAsync
     *
     * 
     *
     * @param string $callback_url  (required)
     * @param string $events  (required)
     * @param string $project_id ProjectId (required)
     * @param string $description  (optional)
     * @param bool $active  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdWebhooksPostAsync($callback_url, $events, $project_id, $description = null, $active = null)
    {
        return $this->projectsProjectIdWebhooksPostAsyncWithHttpInfo($callback_url, $events, $project_id, $description, $active)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation projectsProjectIdWebhooksPostAsyncWithHttpInfo
     *
     * 
     *
     * @param string $callback_url  (required)
     * @param string $events  (required)
     * @param string $project_id ProjectId (required)
     * @param string $description  (optional)
     * @param bool $active  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectsProjectIdWebhooksPostAsyncWithHttpInfo($callback_url, $events, $project_id, $description = null, $active = null)
    {
        $returnType = '\Swagger\Client\Model\Webhook';
        $request = $this->projectsProjectIdWebhooksPostRequest($callback_url, $events, $project_id, $description, $active);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'projectsProjectIdWebhooksPost'
     *
     * @param string $callback_url  (required)
     * @param string $events  (required)
     * @param string $project_id ProjectId (required)
     * @param string $description  (optional)
     * @param bool $active  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function projectsProjectIdWebhooksPostRequest($callback_url, $events, $project_id, $description = null, $active = null)
    {
        // verify the required parameter 'callback_url' is set
        if ($callback_url === null) {
            throw new \InvalidArgumentException('Missing the required parameter $callback_url when calling projectsProjectIdWebhooksPost');
        }
        // verify the required parameter 'events' is set
        if ($events === null) {
            throw new \InvalidArgumentException('Missing the required parameter $events when calling projectsProjectIdWebhooksPost');
        }
        // verify the required parameter 'project_id' is set
        if ($project_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_id when calling projectsProjectIdWebhooksPost');
        }

        $resourcePath = '/projects/{ProjectId}/webhooks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($callback_url !== null) {
            $queryParams['callback_url'] = ObjectSerializer::toQueryValue($callback_url);
        }
        // query params
        if ($description !== null) {
            $queryParams['description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($events !== null) {
            $queryParams['events'] = ObjectSerializer::toQueryValue($events);
        }
        // query params
        if ($active !== null) {
            $queryParams['active'] = ObjectSerializer::toQueryValue($active);
        }

        // path params
        if ($project_id !== null) {
            $resourcePath = str_replace('{' . 'ProjectId' . '}', ObjectSerializer::toPathValue($project_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userGet
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\User
     */
    public function userGet()
    {
        list($response) = $this->userGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation userGetWithHttpInfo
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\User, HTTP status code, HTTP response headers (array of strings)
     */
    public function userGetWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\User';
        $request = $this->userGetRequest();

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\User', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userGetAsync
     *
     * 
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userGetAsync()
    {
        return $this->userGetAsyncWithHttpInfo()->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation userGetAsyncWithHttpInfo
     *
     * 
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userGetAsyncWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\User';
        $request = $this->userGetRequest();

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'userGet'
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userGetRequest()
    {

        $resourcePath = '/user';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

}
