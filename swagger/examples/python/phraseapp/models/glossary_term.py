# coding: utf-8

"""
    PhraseApp

    PhraseApp API for the interaction with the PhraseApp localization platform

    OpenAPI spec version: 2.0
    Contact: support@phraseapp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GlossaryTerm(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'term': 'str',
        'description': 'str',
        'translatable': 'bool',
        'case_sensitive': 'bool',
        'translations': 'list[GlossaryTermTranslation]',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'term': 'term',
        'description': 'description',
        'translatable': 'translatable',
        'case_sensitive': 'case_sensitive',
        'translations': 'translations',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, term=None, description=None, translatable=None, case_sensitive=None, translations=None, created_at=None, updated_at=None):
        """
        GlossaryTerm - a model defined in Swagger
        """

        self._id = None
        self._term = None
        self._description = None
        self._translatable = None
        self._case_sensitive = None
        self._translations = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
          self.id = id
        if term is not None:
          self.term = term
        if description is not None:
          self.description = description
        if translatable is not None:
          self.translatable = translatable
        if case_sensitive is not None:
          self.case_sensitive = case_sensitive
        if translations is not None:
          self.translations = translations
        if created_at is not None:
          self.created_at = created_at
        if updated_at is not None:
          self.updated_at = updated_at

    @property
    def id(self):
        """
        Gets the id of this GlossaryTerm.

        :return: The id of this GlossaryTerm.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this GlossaryTerm.

        :param id: The id of this GlossaryTerm.
        :type: str
        """

        self._id = id

    @property
    def term(self):
        """
        Gets the term of this GlossaryTerm.

        :return: The term of this GlossaryTerm.
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """
        Sets the term of this GlossaryTerm.

        :param term: The term of this GlossaryTerm.
        :type: str
        """

        self._term = term

    @property
    def description(self):
        """
        Gets the description of this GlossaryTerm.

        :return: The description of this GlossaryTerm.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this GlossaryTerm.

        :param description: The description of this GlossaryTerm.
        :type: str
        """

        self._description = description

    @property
    def translatable(self):
        """
        Gets the translatable of this GlossaryTerm.

        :return: The translatable of this GlossaryTerm.
        :rtype: bool
        """
        return self._translatable

    @translatable.setter
    def translatable(self, translatable):
        """
        Sets the translatable of this GlossaryTerm.

        :param translatable: The translatable of this GlossaryTerm.
        :type: bool
        """

        self._translatable = translatable

    @property
    def case_sensitive(self):
        """
        Gets the case_sensitive of this GlossaryTerm.

        :return: The case_sensitive of this GlossaryTerm.
        :rtype: bool
        """
        return self._case_sensitive

    @case_sensitive.setter
    def case_sensitive(self, case_sensitive):
        """
        Sets the case_sensitive of this GlossaryTerm.

        :param case_sensitive: The case_sensitive of this GlossaryTerm.
        :type: bool
        """

        self._case_sensitive = case_sensitive

    @property
    def translations(self):
        """
        Gets the translations of this GlossaryTerm.

        :return: The translations of this GlossaryTerm.
        :rtype: list[GlossaryTermTranslation]
        """
        return self._translations

    @translations.setter
    def translations(self, translations):
        """
        Sets the translations of this GlossaryTerm.

        :param translations: The translations of this GlossaryTerm.
        :type: list[GlossaryTermTranslation]
        """

        self._translations = translations

    @property
    def created_at(self):
        """
        Gets the created_at of this GlossaryTerm.

        :return: The created_at of this GlossaryTerm.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this GlossaryTerm.

        :param created_at: The created_at of this GlossaryTerm.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this GlossaryTerm.

        :return: The updated_at of this GlossaryTerm.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this GlossaryTerm.

        :param updated_at: The updated_at of this GlossaryTerm.
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GlossaryTerm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
