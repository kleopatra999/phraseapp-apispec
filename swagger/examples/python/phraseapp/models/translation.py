# coding: utf-8

"""
    PhraseApp

    PhraseApp API for the interaction with the PhraseApp localization platform

    OpenAPI spec version: 2.0
    Contact: support@phraseapp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Translation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'content': 'str',
        'unverified': 'bool',
        'excluded': 'bool',
        'plural_suffix': 'str',
        'key': 'KeyPreview',
        'locale': 'LocalePreview',
        'placeholders': 'list[str]',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'content': 'content',
        'unverified': 'unverified',
        'excluded': 'excluded',
        'plural_suffix': 'plural_suffix',
        'key': 'key',
        'locale': 'locale',
        'placeholders': 'placeholders',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, content=None, unverified=None, excluded=None, plural_suffix=None, key=None, locale=None, placeholders=None, created_at=None, updated_at=None):
        """
        Translation - a model defined in Swagger
        """

        self._id = None
        self._content = None
        self._unverified = None
        self._excluded = None
        self._plural_suffix = None
        self._key = None
        self._locale = None
        self._placeholders = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
          self.id = id
        if content is not None:
          self.content = content
        if unverified is not None:
          self.unverified = unverified
        if excluded is not None:
          self.excluded = excluded
        if plural_suffix is not None:
          self.plural_suffix = plural_suffix
        if key is not None:
          self.key = key
        if locale is not None:
          self.locale = locale
        if placeholders is not None:
          self.placeholders = placeholders
        if created_at is not None:
          self.created_at = created_at
        if updated_at is not None:
          self.updated_at = updated_at

    @property
    def id(self):
        """
        Gets the id of this Translation.

        :return: The id of this Translation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Translation.

        :param id: The id of this Translation.
        :type: str
        """

        self._id = id

    @property
    def content(self):
        """
        Gets the content of this Translation.

        :return: The content of this Translation.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this Translation.

        :param content: The content of this Translation.
        :type: str
        """

        self._content = content

    @property
    def unverified(self):
        """
        Gets the unverified of this Translation.

        :return: The unverified of this Translation.
        :rtype: bool
        """
        return self._unverified

    @unverified.setter
    def unverified(self, unverified):
        """
        Sets the unverified of this Translation.

        :param unverified: The unverified of this Translation.
        :type: bool
        """

        self._unverified = unverified

    @property
    def excluded(self):
        """
        Gets the excluded of this Translation.

        :return: The excluded of this Translation.
        :rtype: bool
        """
        return self._excluded

    @excluded.setter
    def excluded(self, excluded):
        """
        Sets the excluded of this Translation.

        :param excluded: The excluded of this Translation.
        :type: bool
        """

        self._excluded = excluded

    @property
    def plural_suffix(self):
        """
        Gets the plural_suffix of this Translation.

        :return: The plural_suffix of this Translation.
        :rtype: str
        """
        return self._plural_suffix

    @plural_suffix.setter
    def plural_suffix(self, plural_suffix):
        """
        Sets the plural_suffix of this Translation.

        :param plural_suffix: The plural_suffix of this Translation.
        :type: str
        """

        self._plural_suffix = plural_suffix

    @property
    def key(self):
        """
        Gets the key of this Translation.

        :return: The key of this Translation.
        :rtype: KeyPreview
        """
        return self._key

    @key.setter
    def key(self, key):
        """
        Sets the key of this Translation.

        :param key: The key of this Translation.
        :type: KeyPreview
        """

        self._key = key

    @property
    def locale(self):
        """
        Gets the locale of this Translation.

        :return: The locale of this Translation.
        :rtype: LocalePreview
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """
        Sets the locale of this Translation.

        :param locale: The locale of this Translation.
        :type: LocalePreview
        """

        self._locale = locale

    @property
    def placeholders(self):
        """
        Gets the placeholders of this Translation.

        :return: The placeholders of this Translation.
        :rtype: list[str]
        """
        return self._placeholders

    @placeholders.setter
    def placeholders(self, placeholders):
        """
        Sets the placeholders of this Translation.

        :param placeholders: The placeholders of this Translation.
        :type: list[str]
        """

        self._placeholders = placeholders

    @property
    def created_at(self):
        """
        Gets the created_at of this Translation.

        :return: The created_at of this Translation.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Translation.

        :param created_at: The created_at of this Translation.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Translation.

        :return: The updated_at of this Translation.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Translation.

        :param updated_at: The updated_at of this Translation.
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Translation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
