# coding: utf-8

"""
    PhraseApp

    PhraseApp API for the interaction with the PhraseApp localization platform

    OpenAPI spec version: 2.0
    Contact: support@phraseapp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Locale(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'code': 'str',
        'default': 'bool',
        'main': 'bool',
        'rtl': 'bool',
        'source_locale': 'LocalePreview',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'code': 'code',
        'default': 'default',
        'main': 'main',
        'rtl': 'rtl',
        'source_locale': 'source_locale',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, name=None, code=None, default=None, main=None, rtl=None, source_locale=None, created_at=None, updated_at=None):
        """
        Locale - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._code = None
        self._default = None
        self._main = None
        self._rtl = None
        self._source_locale = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if code is not None:
          self.code = code
        if default is not None:
          self.default = default
        if main is not None:
          self.main = main
        if rtl is not None:
          self.rtl = rtl
        if source_locale is not None:
          self.source_locale = source_locale
        if created_at is not None:
          self.created_at = created_at
        if updated_at is not None:
          self.updated_at = updated_at

    @property
    def id(self):
        """
        Gets the id of this Locale.

        :return: The id of this Locale.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Locale.

        :param id: The id of this Locale.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Locale.

        :return: The name of this Locale.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Locale.

        :param name: The name of this Locale.
        :type: str
        """

        self._name = name

    @property
    def code(self):
        """
        Gets the code of this Locale.

        :return: The code of this Locale.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this Locale.

        :param code: The code of this Locale.
        :type: str
        """

        self._code = code

    @property
    def default(self):
        """
        Gets the default of this Locale.

        :return: The default of this Locale.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """
        Sets the default of this Locale.

        :param default: The default of this Locale.
        :type: bool
        """

        self._default = default

    @property
    def main(self):
        """
        Gets the main of this Locale.

        :return: The main of this Locale.
        :rtype: bool
        """
        return self._main

    @main.setter
    def main(self, main):
        """
        Sets the main of this Locale.

        :param main: The main of this Locale.
        :type: bool
        """

        self._main = main

    @property
    def rtl(self):
        """
        Gets the rtl of this Locale.

        :return: The rtl of this Locale.
        :rtype: bool
        """
        return self._rtl

    @rtl.setter
    def rtl(self, rtl):
        """
        Sets the rtl of this Locale.

        :param rtl: The rtl of this Locale.
        :type: bool
        """

        self._rtl = rtl

    @property
    def source_locale(self):
        """
        Gets the source_locale of this Locale.

        :return: The source_locale of this Locale.
        :rtype: LocalePreview
        """
        return self._source_locale

    @source_locale.setter
    def source_locale(self, source_locale):
        """
        Sets the source_locale of this Locale.

        :param source_locale: The source_locale of this Locale.
        :type: LocalePreview
        """

        self._source_locale = source_locale

    @property
    def created_at(self):
        """
        Gets the created_at of this Locale.

        :return: The created_at of this Locale.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Locale.

        :param created_at: The created_at of this Locale.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Locale.

        :return: The updated_at of this Locale.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Locale.

        :param updated_at: The updated_at of this Locale.
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Locale):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
